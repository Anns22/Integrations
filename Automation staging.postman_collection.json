{
	"info": {
		"_postman_id": "e8b16b8f-050f-427e-8d8b-fe5a1882fc0a",
		"name": "Automation staging",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26515196",
		"_collection_link": "https://winter-capsule-961230.postman.co/workspace/API-Integration-~cb19cb48-4a0e-4b38-8b55-25e4fabfcf15/collection/26515196-e8b16b8f-050f-427e-8d8b-fe5a1882fc0a?action=share&source=collection_link&creator=26515196"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Use a function block to create a new scope\r",
									"(function() {\r",
									"    // Initialize responseBody with the response JSON body\r",
									"    let responseBody;\r",
									"    try {\r",
									"        responseBody = pm.response.json();\r",
									"    } catch (error) {\r",
									"        console.error(\"Error parsing JSON response:\", error.message);\r",
									"    }\r",
									"\r",
									"    // Check if responseBody and responseBody.otp are defined\r",
									"    if (responseBody && responseBody.otp) {\r",
									"        // Extract the otp value from the response body\r",
									"        const otp = responseBody.otp;\r",
									"\r",
									"        // Set otp as a global variable\r",
									"        pm.globals.set(\"otp\", otp);\r",
									"\r",
									"        // Log the OTP value\r",
									"        console.log(\"OTP:\", otp);\r",
									"    }\r",
									"})();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"annsherry+Api@agilecyber.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/login/auth/magic-link",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"login",
								"auth",
								"magic-link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activation token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", data.token);\r",
									"\r",
									"if (data.data && Array.isArray(data.data) && data.data.length > 0) {\r",
									"  const deviceList = data.data;\r",
									"  const deviceId = deviceList[0].device_id; // Assuming the device ID is located in the first item of the list\r",
									"  pm.globals.set(\"device_id\", deviceId);\r",
									"  \r",
									"} else {\r",
									"  console.log('Invalid response structure or empty data array');\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://staging.sustainion.tech/api/login/auth/get_token_test/annsherry+Api@agilecyber.com",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"login",
								"auth",
								"get_token_test",
								"annsherry+Api@agilecyber.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"//console.log(data);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", data.access_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"device_id\", data.device_id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{token}}\",\r\n    \"device_id\": \"{{device_id}}\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/login/auth/token",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"login",
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", data.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"token\": \"{{refresh_token}}\",\r\n    \"device_id\": \"{{device_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/login/auth/refresh_token",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"login",
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FMT",
			"item": [
				{
					"name": "Parameter Builder",
					"item": [
						{
							"name": "Table name list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"// postman.setEnvironmentVariable(\"parameter_table_id\", data.data[0]['id']); \r",
											"pm.globals.set(\"parameter_table_id\", data.data[0]['id']);\r",
											"pm.globals.set(\"parameter_table_name\", data.data[0]['name']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/parameter_table/index?export=1",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"parameter_table",
										"index"
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Table Field List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"parameter_filter_field\", data.data[7]['COLUMN_NAME']); \r",
											"pm.globals.set(\"parameter_filter_field\", data.data[5]['COLUMN_NAME']);\r",
											"pm.globals.set(\"parameter_field\", data.data[25]['COLUMN_NAME']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/parameter_table_field/{{parameter_table_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"parameter_table_field",
										"{{parameter_table_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter field list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Check if the data array is empty\r",
											"if (responseJson.data.length === 0) {\r",
											"    // Set value 1 to the parameter_filter_field global variable\r",
											"    pm.globals.set(\"parameter_filter_value\", 1);\r",
											"} else {\r",
											"    // Set the id of the first item to the parameter_filter_field global variable\r",
											"    pm.globals.set(\"parameter_filter_value\", responseJson.data[0].id);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/referenced_table_field_list/{{parameter_table_id}}/{{parameter_filter_field}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"referenced_table_field_list",
										"{{parameter_table_id}}",
										"{{parameter_filter_field}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create parameter - Table Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"table parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);\r",
											"\r",
											"pm.variables.set(\"field_function\", \"sum\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"table\",\r\n    \"table_name\": \"{{parameter_table_name}}\",\r\n    \"field_name\": \"{{parameter_field}}\",\r\n    \"field_function\": \"{{field_function}}\",\r\n    \"field_groupby\": \"\",\r\n    \"filter_field\": \"{{parameter_filter_field}}\",\r\n    \"filter_condition\": \"=\",\r\n    \"filter_value\": \"{{parameter_filter_value}}\",\r\n    \"formula\": null,\r\n    \"table_id\": \"{{parameter_table_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/addreportparameter/",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"addreportparameter",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Parameter List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"parameter_id\", responseJson.data[0].id);\r",
											"pm.globals.set(\"parameter_name\", responseJson.data[0].name);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/reportparameter/?export=1&sortby=desc",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"reportparameter",
										""
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										},
										{
											"key": "sortby",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Parameter Update-Table Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);\r",
											"\r",
											"pm.variables.set(\"field_function\", \"sum\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"table\",\r\n    \"table_name\": \"{{parameter_table_name}}\",\r\n    \"field_name\": \"{{parameter_field}}\",\r\n    \"field_function\": \"{{field_function}}\",\r\n    \"field_groupby\": \"\",\r\n    \"filter_field\": \"{{parameter_filter_field}}\",\r\n    \"filter_condition\": \"=\",\r\n    \"filter_value\": \"{{parameter_filter_value}}\",\r\n    \"formula\": null,\r\n    \"table_id\": \"{{parameter_table_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/edit-parameter/{{parameter_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"edit-parameter",
										"{{parameter_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "View Parameter",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/view-parameter/{{parameter_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"view-parameter",
										"{{parameter_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create parameter -  Derived Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"derived parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"derived\",\r\n    \"table_name\": null,\r\n    \"field_name\": null,\r\n    \"field_function\": null,\r\n    \"field_groupby\": null,\r\n    \"filter_field\": null,\r\n    \"filter_condition\": null,\r\n    \"filter_value\": null,\r\n    \"formula\": \"[{\\\"title\\\":\\\"(\\\",\\\"type\\\":\\\"openparenthesis\\\"},{\\\"id\\\":{{parameter_id}},\\\"title\\\":\\\"{{parameter_name}}\\\",\\\"type\\\":\\\"operand\\\"},{\\\"title\\\":\\\"*\\\",\\\"type\\\":\\\"operator\\\"},{\\\"title\\\":\\\"100\\\",\\\"type\\\":\\\"operand\\\"},{\\\"title\\\":\\\")\\\",\\\"type\\\":\\\"closeparenthesis\\\"}]\",\r\n    \"table_id\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/addreportparameter/",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"addreportparameter",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create parameter -  input Type Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"input parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"input\",\r\n    \"table_name\": null,\r\n    \"field_name\": null,\r\n    \"field_function\": null,\r\n    \"field_groupby\": null,\r\n    \"filter_field\": null,\r\n    \"filter_condition\": null,\r\n    \"filter_value\": null,\r\n    \"formula\": null,\r\n    \"table_id\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/addreportparameter/",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"addreportparameter",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Frame work Builder",
					"item": [
						{
							"name": "Unit List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"unit_id\", data.data[0]['id']);\r",
											"pm.globals.set(\"unit_name\", data.data[0]['name']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/admin/list/units",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"admin",
										"list",
										"units"
									]
								}
							},
							"response": []
						},
						{
							"name": "location list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"location_id\", data.data[0]['id']);\r",
											"pm.globals.set(\"location_name\", data.data[0]['name']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/location-list/",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"location-list",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// report Name\r",
											"const randomName = \"Report_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"report_name\", randomName);\r",
											"\r",
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"report_id\", data.data['id']);\r",
											"pm.globals.set(\"report_name\", data.data['reportname']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": \"{{location_id}}\",\r\n    \"reportsection\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/addreport/",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"addreport",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update report Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.variables.set(\"report_format\", \"numberwithpercentage\");\r",
											"\r",
											"pm.variables.set(\"section_topic_name\", \"environment\");\r",
											"\r",
											"pm.variables.set(\"sectionname\", \"environment\");\r",
											"\r",
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": {{location_id}},\r\n    \"reportsection\": [\r\n        {\r\n            \"document\":\"{{file_path}}\",\r\n            \"document_name\":\"{{file_name}}\",\r\n            \"format\": \"{{report_format}}\",\r\n            \"parameter_id\": \"{{parameter_id}}\",\r\n            \"parameter_name\": \"{{parameter_name}}\",\r\n            \"remark\": \"\",\r\n            \"section_topic_name\": \"{{section_topic_name}}\",\r\n            \"sectionname\": \"{{sectionname}}\",\r\n            \"sort_order\": 1,\r\n            \"unit_id\": \"{{unit_id}}\"\r\n        }\r\n    ],\r\n    \"report_location_name\": \"{{location_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/update-report/{{report_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"update-report",
										"{{report_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "view report",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/view-report/{{report_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"view-report",
										"{{report_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Report list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/report-data-list/?export=1&sortby=desc",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"report-data-list",
										""
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										},
										{
											"key": "sortby",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Report View",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/reportparameter/?export=1&sortby=asc&is_formula=1",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"reportparameter",
										""
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										},
										{
											"key": "sortby",
											"value": "asc"
										},
										{
											"key": "is_formula",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remark update - client Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);\r",
											"\r",
											"\r",
											"pm.variables.set(\"report_format\", \"numberwithpercentage\");\r",
											"\r",
											"pm.variables.set(\"section_topic_name\", \"environment\");\r",
											"\r",
											"pm.variables.set(\"sectionname\", \"environment\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": \"{{location_id}}\",\r\n    \"reportsection\": [\r\n        {\r\n            \"sectionname\": \"{{sectionname}}\",\r\n            \"section_data\": [\r\n                {\r\n                    \"section_topic_name\": \"{{section_topic_name}}\",\r\n                    \"section_topic_data\": [\r\n                        {\r\n                            \"parameter_id\": \"{{parameter_id}}\",\r\n                            \"parameter_name\": \"{{parameter_name}}\",\r\n                            \"unit_id\": \"{{unit_id}}\",\r\n                            \"unit_name\": \"{{unit_name}}\",\r\n                            \"type\": \"table\",\r\n                            \"format\": \"{{report_format}}\",\r\n                            \"remark\": \"test\",\r\n                            \"year1\": null,\r\n                            \"year2\": null,\r\n                            \"sort_order\": 1,\r\n                            \"document\": \"\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/update-view-report/{{report_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"update-view-report",
										"{{report_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload document-Client Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.variables.set(\"report_format\", \"numberwithpercentage\");\r",
											"\r",
											"pm.variables.set(\"section_topic_name\", \"environment\");\r",
											"\r",
											"pm.variables.set(\"sectionname\", \"environment\");\r",
											"\r",
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": {{location_id}},\r\n    \"reportsection\": [\r\n        {\r\n            \"document\": \"\",\r\n            \"format\": \"{{report_format}}\",\r\n            \"parameter_id\": \"{{parameter_id}}\",\r\n            \"parameter_name\": \"{{parameter_name}}\",\r\n            \"remark\": \"\",\r\n            \"section_topic_name\": \"{{section_topic_name}}\",\r\n            \"sectionname\": \"{{sectionname}}\",\r\n            \"sort_order\": 1,\r\n            \"unit_id\": \"{{unit_id}}\"\r\n        }\r\n    ],\r\n    \"report_location_name\": \"{{location_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/update-report/{{report_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"update-report",
										"{{report_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Report-client Admin",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/get-report/{{report_id}}",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"get-report",
										"{{report_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Table list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON to extract the data array\r",
									"const responseJson = pm.response.json();\r",
									"const dataArray = responseJson.data;\r",
									"\r",
									"// Generate a random index to select a random data entry\r",
									"const randomIndex = Math.floor(Math.random() * dataArray.length);\r",
									"\r",
									"// Get the label value at the random index\r",
									"const randomLabelValue = dataArray[randomIndex].label;\r",
									"\r",
									"// Get the id value at the random index\r",
									"const randomIdValue = dataArray[randomIndex].id;\r",
									"\r",
									"// Get the table_name value at the random index\r",
									"const randomTableNameValue = dataArray[randomIndex].table_name;\r",
									"\r",
									"// Log the random label value, id, and table_name to the console\r",
									"console.log(\"Random Label Value:\", randomLabelValue);\r",
									"console.log(\"Random ID Value:\", randomIdValue);\r",
									"console.log(\"Random Table Name Value:\", randomTableNameValue);\r",
									"\r",
									"// Set the random label value as a global environment variable\r",
									"pm.globals.set(\"randomLabelVariable\", randomLabelValue);\r",
									"\r",
									"// Set the random id value as a global environment variable\r",
									"pm.globals.set(\"randomIdVariable\", randomIdValue);\r",
									"\r",
									"// Set the random table_name value as a global environment variable\r",
									"pm.globals.set(\"randomTableNameVariable\", randomTableNameValue);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-report}}reportbuilder/tablelist?export=1&order_by=asc",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"tablelist"
							],
							"query": [
								{
									"key": "export",
									"value": "1"
								},
								{
									"key": "order_by",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of the randomLabelVariable from globals\r",
									"const randomLabelValue = pm.globals.get(\"randomLabelVariable\");\r",
									"\r",
									"// Generate a random name based on the randomLabelValue\r",
									"function generateRandomName(label) {\r",
									"    const randomNumber = Math.floor(Math.random() * 1000);\r",
									"    return `${label}_Test_${randomNumber}`;\r",
									"}\r",
									"\r",
									"// Call the function to generate a random name using the randomLabelValue\r",
									"const randomTestName = generateRandomName(randomLabelValue);\r",
									"\r",
									"// Log the random name to the console\r",
									"console.log(\"Random Test Name:\", randomTestName);\r",
									"\r",
									"// Set the random name as a global environment variable\r",
									"pm.globals.set(\"randomTestNameVariable\", randomTestName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"{{randomTestNameVariable}}\",\r\n        \"title\": \"Report\",\r\n        \"source_data\": {{randomIdVariable}},\r\n        \"start_date\": \"2023-01-01\",\r\n        \"end_date\": \"2023-08-30\",\r\n        \"output_type\": \"reports\",\r\n        \"content_json\": \"{\\\"key\\\": \\\"value\\\"}\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-report}}/reportbuilder/reports",
							"host": [
								"{{url-report}}"
							],
							"path": [
								"reportbuilder",
								"reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON to extract the data array\r",
									"const responseJson = pm.response.json();\r",
									"const dataArray = responseJson.data;\r",
									"\r",
									"// Sort the data array by report id in descending order\r",
									"dataArray.sort((a, b) => b.id - a.id);\r",
									"\r",
									"// Get the latest report id value\r",
									"const latestReportId = dataArray[0].id;\r",
									"\r",
									"// Log the latest report id to the console\r",
									"console.log(\"Latest Report ID:\", latestReportId);\r",
									"\r",
									"// Set the latest report id as a global environment variable\r",
									"pm.globals.set(\"latestReportIdVariable\", latestReportId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-report}}reportbuilder/reports?order_by=desc",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"reports"
							],
							"query": [
								{
									"key": "order_by",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the random label value from the global environment variable\r",
									"const randomLabelValue = pm.globals.get(\"randomLabelVariable\");\r",
									"\r",
									"// Generate a random name using the random label value\r",
									"const randomName = `${randomLabelValue}_Name`;\r",
									"\r",
									"// Log the random name to the console\r",
									"console.log(\"Random Name:\", randomName);\r",
									"\r",
									"// Set the random name as a global environment variable\r",
									"pm.globals.set(\"randomNameVariable\", randomName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\":{{latestReportIdVariable}},\r\n    \"name\": \"{{randomNameVariable}}\",\r\n    \"source_data\": \"{{randomIdVariable}}\",\r\n    \"start_date\": \"2023-06-24\",\r\n    \"end_date\": \"2023-06-30\",\r\n    \"output_type\": \"PDF\",\r\n    \"content_json\": \"{\\\"key\\\": \\\"value\\\"}\"\r\n  }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-report}}reportbuilder/reports",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Report list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-report}}reportbuilder/report_list?tablename={{randomTableNameVariable}}&limit=500000",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"report_list"
							],
							"query": [
								{
									"key": "tablename",
									"value": "{{randomTableNameVariable}}"
								},
								{
									"key": "limit",
									"value": "500000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n       {{latestReportIdVariable}}\r\n    ]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url-report}}reportbuilder/reports",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"reports"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Page Builder",
			"item": [
				{
					"name": "List all modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"// Randomly select an index within the data array\r",
									"const randomIndex = Math.floor(Math.random() * responseData.data.length);\r",
									"\r",
									"// Extract id and name from the randomly selected data\r",
									"const randomId = responseData.data[randomIndex].id;\r",
									"const randomName = responseData.data[randomIndex].name;\r",
									"\r",
									"// Set the environment variables\r",
									"pm.environment.set(\"randomGlobalId\", randomId);\r",
									"pm.environment.set(\"randomGlobalName\", randomName);\r",
									"\r",
									"// Log the values to the console\r",
									"console.log(\"Randomly Selected ID:\", randomId);\r",
									"console.log(\"Randomly Selected Name:\", randomName);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pagebuilder/modules_list",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"modules_list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of the environment variable \"randomGlobalName\"\r",
									"const randomGlobalName = pm.environment.get(\"randomGlobalName\");\r",
									"\r",
									"// Function to generate a random string of characters\r",
									"function generateRandomString(length) {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate a new random name using the extracted name as a prefix\r",
									"const generatedName = randomGlobalName + \"_\" + generateRandomString(5);\r",
									"\r",
									"// Set the environment variable with the generated name\r",
									"pm.globals.set(\"generatedName\", generatedName);\r",
									"\r",
									"// Log the generated name to the console\r",
									"console.log(\"Generated Name:\", generatedName);\r",
									"\r",
									"// List of meaningful words for generating titles\r",
									"const words = [\r",
									"    \"Adventure\",\r",
									"    \"Journey\",\r",
									"    \"Discovery\",\r",
									"    \"Exploration\",\r",
									"    \"Innovation\",\r",
									"    \"Creativity\",\r",
									"    \"Inspiration\",\r",
									"    \"Dreams\",\r",
									"    \"Solutions\",\r",
									"    \"Success\",\r",
									"    \"Achievement\",\r",
									"    \"Reflection\",\r",
									"    \"Harmony\",\r",
									"    \"Elegance\",\r",
									"    \"Wonder\",\r",
									"    \"Magic\",\r",
									"    \"Brilliance\"\r",
									"];\r",
									"\r",
									"// Function to generate a random index\r",
									"function getRandomIndex(max) {\r",
									"    return Math.floor(Math.random() * max);\r",
									"}\r",
									"\r",
									"// Generate a random meaningful title\r",
									"const randomTitle = `${words[getRandomIndex(words.length)]} of ${words[getRandomIndex(words.length)]}`;\r",
									"\r",
									"// Set the environment variable with the generated title\r",
									"pm.globals.set(\"genTitle\", randomTitle);\r",
									"\r",
									"// Log the generated title to the console\r",
									"console.log(\"Generated Meaningful Title:\", randomTitle);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"{{generatedName}}\",\r\n        \"title\": \"{{genTitle}}\",\r\n        \"module_id\": {{randomGlobalId}},\r\n        \"content\": null\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pagebuilder/pages_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"// Extract the \"id\" field from the response data\r",
									"const id = responseData.data[0].id;\r",
									"\r",
									"// Set the global variable with the extracted \"id\"\r",
									"pm.globals.set(\"pagebuildId\", id);\r",
									"\r",
									"// Log the extracted \"id\" to the console\r",
									"console.log(\"pagebuild  ID:\", id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pagebuilder/pages_list?order_by=desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_list"
							],
							"query": [
								{
									"key": "order_by",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": {{pagebuildId}},\r\n        \"name\": \"{{{{generatedName}}}}\",\r\n        \"title\": \"{{genTitle}}\",\r\n        \"content\": \"{}\",\r\n        \"module_id\": {{randomGlobalId}}\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pagebuilder/pages_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_submit"
							]
						}
					},
					"response": []
				},
				{
					"name": "View single report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pagebuilder/pages_list?id={{pagebuildId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_list"
							],
							"query": [
								{
									"key": "id",
									"value": "{{pagebuildId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"page_ids\":[{{pagebuildId}}]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/pagebuilder/pages_submit",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_submit"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Parameter Delete",
			"item": [
				{
					"name": "Delete Parameter",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://staging.sustainion.tech/api/dashboard/delete-parameter/{{parameter_id}}",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"dashboard",
								"delete-parameter",
								"{{parameter_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Frame work Builder Delete",
			"item": [
				{
					"name": "delete framework builder",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://staging.sustainion.tech/api/dashboard/delete-report/{{report_id}}",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"dashboard",
								"delete-report",
								"{{report_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DashboardReport",
			"item": [
				{
					"name": "Profile of staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/staff_profile",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"staff_profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "GeographicalAge and Analysis",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/geographical_age_gender_analysis",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"geographical_age_gender_analysis"
							]
						}
					},
					"response": []
				},
				{
					"name": "GHG Emissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/ghg_emissions_scope_details",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"ghg_emissions_scope_details"
							]
						}
					},
					"response": []
				},
				{
					"name": "GhgIntensityByManHours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/ghg_intensity_by_man_hours",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"ghg_intensity_by_man_hours"
							]
						}
					},
					"response": []
				},
				{
					"name": "GHGEmissionIntensityByLocationOverTime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/hierarchical_consumer_wise_ghg_emission",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"hierarchical_consumer_wise_ghg_emission"
							]
						}
					},
					"response": []
				},
				{
					"name": "HierarchicalConsumerwiseGHGEmission",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/hierarchical_consumer_wise_ghg_emission",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"hierarchical_consumer_wise_ghg_emission"
							]
						}
					},
					"response": []
				},
				{
					"name": "days_lost_to_injury",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/days_lost_to_injury",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"days_lost_to_injury"
							]
						}
					},
					"response": []
				},
				{
					"name": "Busiest travel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/busiest_travel",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"busiest_travel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumption By Cost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/report/dashboard/consumption_by_cost",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"report",
								"dashboard",
								"consumption_by_cost"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File Upload",
			"item": [
				{
					"name": "File Upload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									" \r",
									"pm.globals.set(\"file_label\", data.data['files'][0]['label']);\r",
									"pm.globals.set(\"file_name\", data.data['files'][0]['filename']);\r",
									"pm.globals.set(\"file_path\", data.data['files'][0]['path']);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"pm.response.to.have.status(200);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "default"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "/C:/Users/ACS/Downloads/Grid_Export (13).pdf"
								},
								{
									"key": "labels",
									"value": "FMT",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/admin/upload-files",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"admin",
								"upload-files"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}