{
	"info": {
		"_postman_id": "b1829705-07d3-4e80-87b0-778af4ca1458",
		"name": "CI/CD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26515196",
		"_collection_link": "https://winter-capsule-961230.postman.co/workspace/API-Integration-~cb19cb48-4a0e-4b38-8b55-25e4fabfcf15/collection/26515196-b1829705-07d3-4e80-87b0-778af4ca1458?action=share&source=collection_link&creator=26515196"
	},
	"item": [
		{
			"name": "Login Copy",
			"item": [
				{
					"name": "Email Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Otp\", data.otp);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"annsherry+api@agilecyber.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://staging.sustainion.tech/api/login/auth/magic-link",
							"protocol": "https",
							"host": [
								"staging",
								"sustainion",
								"tech"
							],
							"path": [
								"api",
								"login",
								"auth",
								"magic-link"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"token\", data.token);\r",
									"\r",
									" \r",
									"\r",
									"if (data.data && Array.isArray(data.data) && data.data.length > 0) {\r",
									"\r",
									"  const deviceList = data.data;\r",
									"\r",
									"  const deviceId = deviceList[0].device_id; // Assuming the device ID is located in the first item of the list\r",
									"\r",
									"  pm.globals.set(\"device_id\", deviceId);\r",
									"\r",
									"  \r",
									"\r",
									"} else {\r",
									"\r",
									"  console.log('Invalid response structure or empty data array');\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{login_url}}/auth/get_token_test/annsherry+api@agilecyber.com",
							"host": [
								"{{login_url}}"
							],
							"path": [
								"auth",
								"get_token_test",
								"annsherry+api@agilecyber.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Token Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"//console.log(data);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", data.access_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"device_id\", data.device_id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{token}}\",\r\n    \"device_id\": \"{{device_id}}\",\r\n    \"otp\": \"{{Otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{login_url}}/auth/token",
							"host": [
								"{{login_url}}"
							],
							"path": [
								"auth",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", data.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"token\": \"{{refresh_token}}\",\r\n    \"device_id\": \"{{device_id}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{login_url}}/auth/refresh_token",
							"host": [
								"{{login_url}}"
							],
							"path": [
								"auth",
								"refresh_token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Settings Copy",
			"item": [
				{
					"name": "Location",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/consumers",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"consumers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Location_type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Location_type_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/consumers",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"consumers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();\r",
											"\r",
											"// Function to generate a random location name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}\r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"Location_Name\", locationName);\r",
											"pm.globals.set(\"Location_Name\", locationName);\r",
											"console.log(locationName);\r",
											"\r",
											"// Add some characters to the location name\r",
											"const modifiedLocationName = `${locationName}-Modified`;\r",
											"const secondparent = `${locationName}-parent_name`;\r",
											"const secondChild = `${locationName}-secondChild`;\r",
											"\r",
											"// Function to generate a unique second child name\r",
											"function generateUniqueSecondChildName(prefix) {\r",
											"    let secondChild = `${prefix}-secondChild`;\r",
											"    let counter = 1;\r",
											"    while (generatedNames.has(secondChild)) {\r",
											"        secondChild = `${prefix}-secondChild-${counter}`;\r",
											"        counter++;\r",
											"    }\r",
											"    generatedNames.add(secondChild);\r",
											"    return secondChild;\r",
											"}\r",
											"\r",
											"const secondChild1 = generateUniqueSecondChildName(locationName);\r",
											"const secondChild2 = generateUniqueSecondChildName(locationName);\r",
											"\r",
											"\r",
											"// Save the modified location name to a Postman environment variable\r",
											"pm.environment.set(\"modifiedLocationName\", modifiedLocationName);\r",
											"pm.environment.set(\"secondparent\", secondparent);\r",
											"pm.environment.set(\"secondChild1\", secondChild1);\r",
											"pm.environment.set(\"secondChild2\", secondChild2);\r",
											"\r",
											"// Log the request body key-value pairs\r",
											"console.log(pm.request.body);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 52,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"parent_location_id\": 1,\r\n            \"name\": \"{{Location_Name}}\",\r\n            \"country_id\": 94,\r\n            \"province\": \"1\",\r\n            \"enabled\": null,\r\n            \"location_type_id\":null,\r\n            \"lockdown_date\":null\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"New_location_Name\", uniqueName);\r",
											"pm.globals.set(\"New_location_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"New_location_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": \"{{Location_type_ID}}\",\r\n            \"parent_location_id\":  1,\r\n            \"name\": \"{{New_location_Name}}\",\r\n            \"country_id\": 94,\r\n            \"province\": \"1\",\r\n            \"enabled\": null,\r\n            \"location_type_id\":null,\r\n            \"lockdown_date\":null\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=52&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "52"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Department",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/departments",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"departments"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Department_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Department_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/departments",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"departments"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Department_name\", uniqueName);\r",
											"pm.globals.set(\"Department_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Department_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 102,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"consumer_id\": 1,\r\n            \"name\": \"{{Department_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Department_name\", uniqueName);\r",
											"pm.globals.set(\"Department_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Department_name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Department_ID}},\r\n            \"consumer_id\": 1,\r\n            \"name\": \"{{Department_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=102",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "102"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Currencies",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Currencies_id\", data.data[0]['id']); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/currencies",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"currencies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fine type",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/fine_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"fine_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Finetype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Finetype_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/fine_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"fine_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Fine_Type\", uniqueName);\r",
											"pm.globals.set(\"Fine_Type\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Fine_Type\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 76,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Fine_Type}}\",\r\n            \"remarks\": \"Toll gate charges.\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"data\": [\r\n        {\r\n            \"id\":{{Finetype_ID}},\r\n            \"name\": \"{{Fine_Type}}+update\"\r\n           \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=76",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "76"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Disposal Methods",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/disposal_methods",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"disposal_methods"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Disposal_Method_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Disposal_Method_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/disposal_methods",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"disposal_methods"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const sort_order = Math.floor(Math.random() * 100) + 1;\r",
											"pm.globals.set(\"sort_order\", sort_order);\r",
											"\r",
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Disposal_Name\", uniqueName);\r",
											"pm.globals.set(\"Disposal_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Disposal_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 77,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Disposal_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"data\": [\r\n        {\r\n            \"id\": {{Disposal_Method_ID}},\r\n            \"name\": \"{{Disposal_Name}}+update\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=77",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "77"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Water report type",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/water_report_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"water_report_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Water_report_type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Water_report_type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/water_report_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"water_report_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Waterreport_Type\", uniqueName);\r",
											"pm.globals.set(\"Waterreport_Type\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Waterreport_Type\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 79,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Waterreport_Type}}\",\r\n            \"remarks\": \"test_water_report\",\r\n            \"domain_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Water_report_type_ID}},\r\n            \"name\": \"{{Waterreport_Type}}+update\",\r\n            \"remarks\": \"test_water_report\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=79",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "79"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Operational risk status",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/operational_risk_statuses",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"operational_risk_statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Operational_Risk_status_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Operational_Risk_status_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/operational_risk_statuses",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"operational_risk_statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"pm.globals.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operationalrisk_status_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 80,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Operationalrisk_status_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"pm.globals.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operationalrisk_status_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Operational_Risk_status_ID}},\r\n            \"name\": \"{{Operationalrisk_status_name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=80",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "80"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Supply chain risk status configuation",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/supply_chain_risk_statuses",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"supply_chain_risk_statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Supplychain_risk_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Supplychain_risk_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/supply_chain_risk_statuses",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"supply_chain_risk_statuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Supplychain_risk_name\", uniqueName);\r",
											"pm.globals.set(\"Supplychain_risk_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Supplychain_risk_name\", uniqueName);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 81,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Supplychain_risk_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Supplychain_risk_ID}},\r\n            \"name\": \"{{Supplychain_risk_name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=81",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "81"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Operational Issue category",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/issue_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"issue_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Operational_Issuecategory_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Operational_Issuecategory_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/issue_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"issue_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operational_Issue_Category_Name\", uniqueName);\r",
											"pm.globals.set(\"Operational_Issue_Category_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operational_Issue_Category_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 83,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Operational_Issue_Category_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Operational_Issuecategory_ID}},\r\n            \"name\": \"{{Operational_Issue_Category_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=83",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "83"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Operational Issue sub type",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/issue_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"issue_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Operational_Issuesubtypes_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Operational_Issuesubtypes_ID\", data.data[0]['id']);\r",
											"\r",
											"postman.setEnvironmentVariable(\"opissue_category_id\", data.data[0]['issue_category_id']); \r",
											"pm.globals.set(\"opissue_category_id\", data.data[0]['issue_category_id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/issue_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"issue_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operational_Issue_type_Name\", uniqueName);\r",
											"pm.globals.set(\"Operational_Issue_type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operational_Issue_type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 84,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Operational_Issue_type_Name}}\",\r\n            \"issue_category_id\": {{opissue_category_id}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Operational_Issuesubtypes_ID}},\r\n            \"name\": \"{{Operational_Issue_type_Name}}+update\",\r\n            \"issue_category_id\": {{Operational_Issuecategory_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=84",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "84"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Supply chain Risk types",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/report_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"report_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Supply_chain_Issue_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Supply_chain_Issue_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/report_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"report_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Supply_Chain_Issue_Name\", uniqueName);\r",
											"pm.globals.set(\"Supply_Chain_Issue_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Supply_Chain_Issue_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 82,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Supply_Chain_Issue_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Supply_chain_Issue_ID}},\r\n            \"name\": \"{{Supply_Chain_Issue_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=82",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "82"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Supply chain Issue subtype",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/report_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"report_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Supply_chain_Issue_Subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Supply_chain_Issue_Subtype_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/report_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"report_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" // Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Supply_chain_name\", uniqueName);\r",
											"pm.globals.set(\"Supply_chain_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Supply_chain_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 85,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Supply_chain_name}}\",\r\n            \"report_category_id\": {{Supply_chain_Issue_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Supply_chain_Issue_Subtype_ID}},\r\n            \"name\": \"{{Supply_chain_name}}+update\",\r\n            \"report_category_id\": {{Supply_chain_Issue_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=85",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "85"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CSR & Env Invs types",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/improvement_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"improvement_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"CSR_ENV_INV_type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/improvement_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"improvement_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" // Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"CSR_ENV_INV_Name\", uniqueName);\r",
											"pm.globals.set(\"CSR_ENV_INV_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 90,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{CSR_ENV_INV_Name}}\",\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{CSR_ENV_INV_type_ID}},\r\n            \"name\": \"{{CSR_ENV_INV_Name}}+update\",\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=90",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "90"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CSR & Env Invs sub types",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/improvement_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"improvement_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"CSR_ENV_INV_subtype_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/improvement_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"improvement_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" // Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"CSR_ENV_INV_Sub_Name\", uniqueName);\r",
											"pm.globals.set(\"CSR_ENV_INV_Sub_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_Sub_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 92,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{CSR_ENV_INV_Sub_Name}}\",\r\n            \"improvement_category_id\":{{CSR_ENV_INV_type_ID}},\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{CSR_ENV_INV_subtype_ID}},\r\n            \"name\": \"{{CSR_ENV_INV_Sub_Name}}+update\",\r\n            \"improvement_category_id\":{{CSR_ENV_INV_type_ID}},\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=92",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "92"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Engine types",
					"item": [
						{
							"name": "Form structure API",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/engine_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"engine_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Engine_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Engine_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/engine_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"engine_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Engine_Name\", uniqueName);\r",
											"pm.globals.set(\"Engine_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Engine_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\":99,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\":\"{{Engine_Name}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n    {\r\n        \"id\": {{Engine_Type_ID}},\r\n        \"name\": \"{{Engine_Name}}+update\"\r\n    }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=99&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "99"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer Accident type",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/customer_accident_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"customer_accident_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"customer_accident_types_id\", data.data[0]['id']); \r",
											"pm.globals.set(\"customer_accident_types_id\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/customer_accident_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"customer_accident_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Accident_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Accident_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Accident_Type_Name\", uniqueName);\r",
											"\r",
											"const descriptions = [\r",
											"  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\r",
											"  \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem.\",\r",
											"  \"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium.\",\r",
											"  \"Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.\",\r",
											"  \"Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet.\",\r",
											"  \"Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam.\"\r",
											"];\r",
											"\r",
											"const randomIndex = Math.floor(Math.random() * descriptions.length);\r",
											"let randomDescription = descriptions[randomIndex];\r",
											"pm.globals.set(\"description\", randomDescription);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 106,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Accident_Type_Name}}\",\r\n            \"description\": \"{{description}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{customer_accident_types_id}},\r\n            \"name\": \"{{Accident_Type_Name}}+update\",\r\n            \"description\": \"{{description}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=106&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "106"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Waste Marpol Disposal",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/waste_marpol_disposals",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"waste_marpol_disposals"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Waste_Marpoldis_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Waste_Marpoldis_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/waste_marpol_disposals",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"waste_marpol_disposals"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const existingNames = pm.globals.get('existing_names') || [];\r",
											"let uniqueName;\r",
											"\r",
											"do {\r",
											"  const randomText = Array.from({ length: 4 }, () => getRandomCharacter('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')).join('');\r",
											"  const randomNumber = getRandomNumber(1000, 9999);\r",
											"  uniqueName = randomText + randomNumber.toString();\r",
											"} while (existingNames.includes(uniqueName));\r",
											"\r",
											"existingNames.push(uniqueName);\r",
											"pm.globals.set('Color_Name', uniqueName);\r",
											"\r",
											"function getRandomCharacter(characters) {\r",
											"  return characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"}\r",
											"\r",
											"function getRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"function generateColorCode() {\r",
											"  const characters = '0123456789ABCDEF';\r",
											"  let colorCode = '#';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"    colorCode += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"  }\r",
											"\r",
											"  return colorCode;\r",
											"}\r",
											"\r",
											"const existingColorCodes = pm.globals.get('existing_color_codes') || [];\r",
											"let uniqueColorCode;\r",
											"\r",
											"do {\r",
											"  uniqueColorCode = generateColorCode();\r",
											"} while (existingColorCodes.includes(uniqueColorCode));\r",
											"\r",
											"existingColorCodes.push(uniqueColorCode);\r",
											"pm.globals.set('Color_Code', uniqueColorCode);\r",
											"\r",
											"  // Generate a random positive number\r",
											"    const randomNumber = Math.floor(Math.random() * 1000) + 1;\r",
											"\r",
											"    // Check that the number is positive\r",
											"    pm.test('Number is positive', function () {\r",
											"        pm.expect(pm.variables.get('sort_order')).to.be.above(0);\r",
											"    });\r",
											"\r",
											"   \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 109,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Color_Name}}\",\r\n            \"color_code\": \"{{Color_Code}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tracking Categories",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/tracking_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"tracking_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Tracking_Category_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Tracking_Category_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/tracking_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"tracking_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Tracking_category_Name\", uniqueName);\r",
											"pm.globals.set(\"Tracking_category_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Tracking_category_Name\", uniqueName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 112,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Tracking_category_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Tracking_Category_ID}},\r\n            \"name\": \"{{Tracking_category_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=112&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "112"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ethnicity",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/ethnicities",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"ethnicities"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ethnicity_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Ethnicity_ID\", data.data[0]['id']);\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/ethnicities",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"ethnicities"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Ethnicity_Name\", uniqueName);\r",
											"pm.globals.set(\"Ethnicity_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Ethnicity_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 171,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Ethnicity_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Ethnicity_ID}},\r\n            \"name\": \"{{Ethnicity_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=171",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "171"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Coverage Type",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/coverage_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"coverage_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Coverage_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Coverage_Type_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/coverage_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"coverage_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Coverage_Name\", uniqueName);\r",
											"pm.globals.set(\"Coverage_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Coverage_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 208,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Coverage_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate a random alphanumeric name\r",
											"function generateRandomName(length) {\r",
											"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"    result += characters.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"// Set the random name in the request parameter\r",
											"pm.variables.set('name', generateRandomName(10));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Coverage_Type_ID}},\r\n            \"name\": \"{{Coverage_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=208",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "208"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Coverage Sub-type Configuration List",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/coverage_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"coverage_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Coverage_Subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Coverage_Subtype_ID\", data.data[0]['id']);\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/coverage_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"coverage_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Coveragesubtype_Name\", uniqueName);\r",
											"pm.globals.set(\"Coveragesubtype_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Coveragesubtype_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 174,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Coveragesubtype_Name}}\",\r\n            \"coverage_category_id\": {{Coverage_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Coverage_Subtype_ID}},\r\n            \"name\": \"{{Coveragesubtype_Name}}+update\",\r\n            \"coverage_category_id\": {{Coverage_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=174",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "174"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Training Type Configuration List",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/training_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"training_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Training_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Training_Type_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/training_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"training_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Training_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Training_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Training_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 218,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Training_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Training_Type_ID}},\r\n            \"name\": \"{{Training_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=218&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "218"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Training Subtype",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/training_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"training_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Training_SubType_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Training_SubType_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/training_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"training_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Training_SubType_Name\", uniqueName);\r",
											"pm.globals.set(\"Training_SubType_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Training_SubType_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 175,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Training_SubType_Name}}\",\r\n            \"training_category_id\": {{Training_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Training_Type_ID}},\r\n            \"name\": \"{{Training_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=218&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "218"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Salary ranges",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/salary_ranges",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"salary_ranges"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Salary_Range_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Salary_Range_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/salary_ranges",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"salary_ranges"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Salary_Range_Name\", uniqueName);\r",
											"pm.globals.set(\"Salary_Range_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Salary_Range_Name\", uniqueName);\r",
											"\r",
											"// Generate a random two-digit numeric value\r",
											"const getRandomTwoDigitNumber = () => {\r",
											"  return Math.floor(Math.random() * 90) + 10; // Generates a random number between 10 and 99 (inclusive)\r",
											"};\r",
											"\r",
											"// Assign the generated value to a variable\r",
											"pm.variables.set(\"RandomNumber\", getRandomTwoDigitNumber().toString());\r",
											"pm.globals.set(\"RandomNumber\", getRandomTwoDigitNumber().toString());\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 183,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Salary_Range_Name}}\",\r\n            \"upper_bound\":{{RandomNumber}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 183,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Salary_Range_ID}},\r\n            \"name\": \"{{Salary_Range_Name}}+update\",\r\n            \"upper_bound\":{{RandomNumber}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=183",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "183"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Salary grade",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/salary_grades",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"salary_grades"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Salary_Grade_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Salary_Grade_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/salary_grades",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"salary_grades"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Salary_Grade_Name\", uniqueName);\r",
											"pm.globals.set(\"Salary_Grade_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Salary_Grade_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 209,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Salary_Grade_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 209,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Salary_Grade_ID}},\r\n            \"name\": \"{{Salary_Grade_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=209",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "209"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trade region",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/trade_regions",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"trade_regions"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Trade_Regions_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Trade_Regions_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/trade_regions",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"trade_regions"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const sort_order = Math.floor(Math.random() * 100) + 1;\r",
											"pm.globals.set(\"sort_order\", sort_order);\r",
											"\r",
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Trade_Region_Name\", uniqueName);\r",
											"pm.globals.set(\"Trade_Region_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Trade_Region_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 217,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Trade_Region_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const sort_order = Math.floor(Math.random() * 100) + 1;\r",
											"pm.globals.set(\"sort_order_unique\", sort_order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\" :{{Trade_Regions_ID}} ,\r\n           \"name\": \"{{Trade_Region_Name}}+update\",\r\n            \"sort_order\": {{sort_order_unique}}\r\n        }\r\n\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=217",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "217"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ocean port",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/ocean_ports",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"ocean_ports"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ocean_Port_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Ocean_Port_ID\", data.data[0]['id']);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ocean_Port_Name_Dis\", data.data[0]['name']); \r",
											"pm.globals.set(\"Ocean_Port_Name_Dis\", data.data[0]['name']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/ocean_ports",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"ocean_ports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Ocean_Name\", uniqueName);\r",
											"pm.globals.set(\"Ocean_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Ocean_Name\", uniqueName);\r",
											"\r",
											"\r",
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('random_alphabet_code', randomCode);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 189,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Ocean_Name}}\",\r\n            \"code\": \"{{random_alphabet_code}}\",\r\n            \"country_id\": {{Countries_ID}},\r\n            \"trade_region_id\": {{Trade_Regions_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('random_alphabet_code', randomCode);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\":{{Ocean_Port_ID}},\r\n           \"name\": \"{{Ocean_Name}}+update\",\r\n            \"code\": \"{{random_alphabet_code}}\",\r\n            \"country_id\": {{Countries_ID}},\r\n            \"trade_region_id\": {{Trade_Regions_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=189",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "189"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Gender",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/gender",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"gender"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Gender_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Gender_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/gender",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"gender"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Gender_Name\", uniqueName);\r",
											"pm.globals.set(\"Gender_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Gender_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 213,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Gender_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Gender_ID}},\r\n            \"name\": \"{{Gender_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=213",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "213"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Employee Type",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/employee_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"employee_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Employee_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Employee_Type_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/employee_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"employee_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Employee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Employee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Employee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 211,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Employee_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Employee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Employee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Employee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Employee_Type_ID}},\r\n            \"name\": \"{{Employee_Type_Name+update}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=211",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "211"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Employee Sub-type Configuration List",
					"item": [
						{
							"name": "Form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/employee_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"employee_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Employee_Subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Employee_Subtype_ID\", data.data[0]['id']);\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/employee_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"employee_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Employee_SubType_Name\", uniqueName);\r",
											"pm.globals.set(\"Employee_SubType_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Employee_SubType_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 212,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Employee_SubType_Name}}\",\r\n            \"employee_category_id\": {{Employee_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Employee_Subtype_ID}},\r\n            \"name\": \"{{Employee_SubType_Name}}+update\",\r\n            \"employee_category_id\": {{Employee_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=212",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "212"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contract Type",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/contract_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"contract_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Contract_Types_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Contract_Types_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/contract_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"contract_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Contract_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Contract_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Contract_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 197,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Contract_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Contract_Types_ID}},\r\n            \"name\": \"{{Contract_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=197",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "197"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Education Levels",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/education_levels",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"education_levels"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Education_level_ID\", data.data[0].id);\r",
											"pm.globals.set(\"Education_level_ID\", data.data[0].id);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/education_levels",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"education_levels"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Education_Name\", uniqueName);\r",
											"pm.globals.set(\"Education_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Education_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 219,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Education_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Education_level_ID}},\r\n            \"name\": \"{{Education_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=219&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "219"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Nationality Group",
					"item": [
						{
							"name": "form structure Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/nationality_groups",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"nationality_groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Nationality_Group_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Nationality_Group_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/nationality_groups",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"nationality_groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Nationality_Group_Name\", uniqueName);\r",
											"pm.globals.set(\"Nationality_Group_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Nationality_Group_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 196,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Nationality_Group_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Nationality_Group_ID}},\r\n            \"name\": \"{{Nationality_Group_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=196",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "196"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Nationalities",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/nationalities",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"nationalities"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Nationality_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Nationality_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/list/nationalities",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"nationalities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Nationality\", uniqueName);\r",
											"pm.globals.set(\"Nationality\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Nationality\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 194,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Nationality}}\",\r\n            \"nationality_group_id\": {{Nationality_Group_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=143&id=388",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "143"
										},
										{
											"key": "id",
											"value": "388"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"//nationality-id\r",
											"// Define the array of values\r",
											"\r",
											"const nationality_group_id = [1,2,3,45,6,7,8,9];\r",
											"// Pre-request script\r",
											"const randomIndex = Math.floor(Math.random() * nationality_group_id.length);\r",
											"pm.variables.set(\"nationality_group_id\", nationality_group_id[randomIndex]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Nationality_ID}},\r\n            \"name\": \"{{Nationality}}+update\",\r\n            \"nationality_group_id\": {{Nationality_Group_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=194",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "194"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Review type",
					"item": [
						{
							"name": "form structure Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/review_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"review_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Review_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Review_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/review_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"review_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Review_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Review_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Review_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 196,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Review_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Review_Type_ID}},\r\n            \"name\": \"{{Review_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=206",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "206"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Injury & lost day Type",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/leave_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"leave_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Injury&Lost_Category_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Injury&Lost_Category_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/leave_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"leave_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Injury_Category_Type\", uniqueName);\r",
											"pm.globals.set(\"Injury_Category_Type\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Injury_Category_Type\", uniqueName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 222,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Injury_Category_Type}}\",\r\n            \"default_nb_lost_days\": 2\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Injury&Lost_Category_ID}},\r\n            \"name\": \"{{Injury_Category_Type}}+update\",\r\n            \"default_nb_lost_days\": 2\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=222",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "222"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Injury & lost day subtype",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/leave_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"leave_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Injury&Lost_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Injury&Lost_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/leave_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"leave_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Injury&leave_Sub_Type_name\", uniqueName);\r",
											"pm.globals.set(\"Injury&leave_Sub_Type_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Injury&leave_Sub_Type_name\", uniqueName);\r",
											"\r",
											"\r",
											"// Define the pre-request script\r",
											"pm.variables.set('default_nb_lost_days', Math.floor(Math.random() * 500) + 1);\r",
											"\r",
											"// Define an array of valid leave category IDs\r",
											"const validLeaveCategoryIds = [1, 2, 5, 6, 7, 8, 9, 10];\r",
											"\r",
											"// Generate a random index to select a leave category ID from the array\r",
											"const randomIndex = Math.floor(Math.random() * validLeaveCategoryIds.length);\r",
											"\r",
											"// Get the random leave category ID\r",
											"const randomLeaveCategoryId = validLeaveCategoryIds[randomIndex];\r",
											"\r",
											"// Set the random leave category ID in the request parameter\r",
											"pm.variables.set('leave_category_id', randomLeaveCategoryId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 176,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Injury&leave_Sub_Type_name}}\",\r\n            \"leave_category_id\": {{Injury&Lost_Category_ID}},\r\n            \"default_nb_lost_days\": {{default_nb_lost_days}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Generate a random alphanumeric name\r",
											"function generateRandomName(length) {\r",
											"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"    result += characters.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"// Set the random name in the request parameter\r",
											"pm.variables.set('name', generateRandomName(10));\r",
											"\r",
											"\r",
											"// Define the pre-request script\r",
											"pm.variables.set('default_nb_lost_days', Math.floor(Math.random() * 500) + 1);\r",
											"\r",
											"// Define an array of valid leave category IDs\r",
											"const validLeaveCategoryIds = [1, 2, 5, 6, 7, 8, 9, 10];\r",
											"\r",
											"// Generate a random index to select a leave category ID from the array\r",
											"const randomIndex = Math.floor(Math.random() * validLeaveCategoryIds.length);\r",
											"\r",
											"// Get the random leave category ID\r",
											"const randomLeaveCategoryId = validLeaveCategoryIds[randomIndex];\r",
											"\r",
											"// Set the random leave category ID in the request parameter\r",
											"pm.variables.set('leave_category_id', randomLeaveCategoryId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Injury&Lost_ID}},\r\n            \"name\": \"{{Injury&leave_Sub_Type_name}}+unique\",\r\n            \"leave_category_id\": {{Injury&Lost_Category_ID}},\r\n            \"default_nb_lost_days\": {{default_nb_lost_days}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=176",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "176"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contract End Reason",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/contract_end_reasons",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"contract_end_reasons"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Contract_End_Reasons_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Contract_End_Reasons_ID\", data.data[0]['id']); \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/contract_end_reasons",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"contract_end_reasons"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Contract_End_Name\", uniqueName);\r",
											"pm.globals.set(\"Contract_End_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Contract_End_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 207,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Contract_End_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Contract_End_Name\", uniqueName);\r",
											"pm.globals.set(\"Contract_End_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Contract_End_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Contract_End_Reasons_ID}},\r\n            \"name\": \"{{Contract_End_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=207",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "207"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Committee Type",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/committee_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"committee_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Committee_Categories_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Committee_Categories_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/committee_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"committee_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Commitee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Commitee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Commitee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 210,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Commitee_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Committee_Categories_ID}},\r\n            \"name\": \"{{Commitee_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=210",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "210"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Committee Subtype",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/committee_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"committee_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Committee_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Committee_Type_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/committee_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"committee_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Commitee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Commitee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Commitee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 198,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Commitee_Type_Name}}\",\r\n            \"committee_category_id\":{{Committee_Categories_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Committee_Type_ID}},\r\n            \"name\": \"{{Commitee_Type_Name}}+update\",\r\n            \"committee_category_id\":{{Committee_Categories_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=198",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "198"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ocean Distance",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/port_distances",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"port_distances"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ocean_Distance_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Ocean_Distance_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/port_distances",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"port_distances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 233,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"origin\": \"ASD\",\r\n            \"destination\": \"ERLHL\",\r\n            \"distance\": {{distance}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=77&subscriber_id=1&id=233",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "77"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "id",
											"value": "233"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Ocean_Distance_ID}},\r\n            \"origin\": \"ASD\",\r\n            \"destination\": \"ERLHL\",\r\n            \"distance\": {{distance}}\r\n\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=233",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "233"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Airports",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/airports",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"airports"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Airport_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Airport_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/airports",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"airports"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Airport_Name\", uniqueName);\r",
											"pm.globals.set(\"Airport_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Airport_Name\", uniqueName);\r",
											"\r",
											"\r",
											"\r",
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 191,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Airport_Name}}\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"city\": \"test\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Airport_ID}},\r\n            \"name\": \"{{Airport_Name}}+update\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"city\": \"test\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=191",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "191"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Airline carrier",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/airlines",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"airlines"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Airline_Carrier_id\", data.data[0]['id']); \r",
											"pm.globals.set(\"Airline_Carrier_id\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/airlines",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"airlines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Airline_Carrier_Name\", uniqueName);\r",
											"pm.globals.set(\"Airline_Carrier_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Airline_Carrier_Name\", uniqueName);\r",
											"\r",
											"\r",
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 190,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Airline_Carrier_Name}}\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Airline_Carrier_id}},\r\n            \"name\": \"{{Airline_Carrier_Name}}+update\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=190",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "190"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Airport Distances",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/airport_distances",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"airport_distances"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Airport_Distance_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Airport_Distance_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/airport_distances",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"airport_distances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 234,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        \r\n        {\r\n            \"origin\": \"HRG\",\r\n            \"destination\": \"JVAGS\",\r\n            \"distance\": {{distance}}\r\n        }\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=77&subscriber_id=1&id=234",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "77"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "id",
											"value": "234"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Airport_Distance_ID}},\r\n            \"origin\": \"HRG\",\r\n            \"destination\": \"JVAGS\",\r\n            \"distance\": {{distance}}\r\n\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=234",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "234"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trip type",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/trip_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"trip_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Trip_Types_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Trip_Types_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/trip_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"trip_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Trip_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Trip_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Trip_Type_Name\", uniqueName);\r",
											"\r",
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 216,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Trip_Type_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Trip_Types_ID}},\r\n            \"name\": \"{{Trip_Type_Name}}+update\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=216",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "216"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product Category (for logistics)",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/product_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"product_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Product_Category_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Product_Category_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/product_categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"product_categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Product_Category_Name\", uniqueName);\r",
											"pm.globals.set(\"Product_Category_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Product_Category_Name\", uniqueName);\r",
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 192,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Product_Category_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Product_Category_ID}},\r\n            \"name\": \"{{Product_Category_Name}}+update\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=192",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "192"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List of values",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/list_of_values",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"list_of_values"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"GHaul_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"GHaul_Type_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/list_of_values",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"list_of_values"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Haul_Name\", uniqueName);\r",
											"pm.globals.set(\"Haul_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Haul_Name\", uniqueName);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 199,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Haul_Name}}\",\r\n            \"type\": \"HaulType\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=199",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "199"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Haul_Type_ID}},\r\n            \"name\": \"{{Haul_Name}}+update\",\r\n            \"type\": \"HaulType\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=199",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "199"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Labels configuration",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/document_labels",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"document_labels"
									]
								}
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Document_Label_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Document_Label_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/document_labels",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"document_labels"
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate a random alphanumeric name\r",
											"function generateRandomName(length) {\r",
											"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"    result += characters.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"// Set the random name in the request parameter\r",
											"pm.variables.set('Label_Name', generateRandomName(10));\r",
											"pm.globals.set('Label_Name', generateRandomName(10));\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 214,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Label_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Document_Label_ID}},\r\n            \"name\": \"{{Label_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=214",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "214"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Water providers",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/water_providers",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"water_providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Water_Providers_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Water_Providers_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/water_providers",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"water_providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"\r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											" }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"\r",
											"const locationName = generateUniqueLocationName();\r",
											"\r",
											"pm.environment.set(\"Water_Provider_name\",locationName);\r",
											"\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"// Generate a random positive number\r",
											"const randomNumber = Math.floor(Math.random() * 1000) + 1;\r",
											"\r",
											"// Set the random number as a request variable\r",
											"pm.variables.set('sort_order', randomNumber);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 89,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Water_Provider_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n             \"id\": {{Water_Providers_ID}},\r\n            \"name\": \"{{Water_Provider_name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=89&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "89"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Water Pollutant",
					"item": [
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Water_pollutants_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Water_pollutants_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/water_pollutants",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"water_pollutants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"water_pollutant_name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"         \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 88,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{water_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"type\": \"WaterPollutant\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":\"{{Water_pollutants_ID}}\",\r\n            \"name\": \"{{water_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"type\": \"WaterPollutant\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=88",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "88"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Air Pollutant",
					"item": [
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Air_pollutants_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Air_pollutants_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/air_pollutants",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"air_pollutants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"Air_pollutant_name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"         \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 88,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Air_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":{{Air_pollutants_ID}},\r\n            \"name\": \"{{Air_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=88",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "88"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tag Master",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/tag_master",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"tag_master"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Tag_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Tag_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/tag_master",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"tag_master"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Tag_Name\", uniqueName);\r",
											"pm.globals.set(\"Tag_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Tag_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 262,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Tag_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":{{Tag_ID}},\r\n            \"name\": \"{{Tag_Name}}+update\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=262",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "262"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tracking Types",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/tracking_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"tracking_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Vehicle_Tracking_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Vehicle_Tracking_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/tracking_types",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"tracking_types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Vehicle_Tracking_Name\", uniqueName);\r",
											"pm.globals.set(\"Vehicle_Tracking_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Vehicle_Tracking_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 113,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Vehicle_Tracking_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":{{Vehicle_Tracking_Type_ID}},\r\n            \"name\": \"{{Vehicle_Tracking_Name}}+update\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=113",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "113"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transportation modes",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/transportation_modes",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"transportation_modes"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Transaportation_Mode_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Transaportation_Mode_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/transportation_modes",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"transportation_modes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Commute Fuel emission factor",
					"item": [
						{
							"name": "form structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/commute_with_fuel_type_emission_factor",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"commute_with_fuel_type_emission_factor"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Commute_Fuel_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Commute_Fuel_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/commute_with_fuel_type_emission_factor",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"commute_with_fuel_type_emission_factor"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const yearOptions = [2020, 2021, 2022, 2023, 2024, 2025, 2026];\r",
											"const yearRandomIndex = Math.floor(Math.random() * yearOptions.length);\r",
											"const yearRandomValue = yearOptions[yearRandomIndex];\r",
											"pm.globals.set(\"year\", yearRandomValue);\r",
											"\r",
											"\r",
											"// Define a function to generate a random decimal number within a specified range\r",
											"function getRandomDecimal(min, max, decimalPlaces) {\r",
											"  const rand = Math.random() * (max - min) + min;\r",
											"  return rand.toFixed(decimalPlaces);\r",
											"}\r",
											"\r",
											"// Set the desired range and decimal places for the random number (change values as needed)\r",
											"const minNumber = 0.1;\r",
											"const maxNumber = 20.0;\r",
											"const decimalPlaces = 2; // Adjust this value to set the number of decimal places\r",
											"\r",
											"// Generate the random decimal number and store it in an environment variable\r",
											"pm.environment.set(\"randomDecimal\", getRandomDecimal(minNumber, maxNumber, decimalPlaces));\r",
											"\r",
											"\r",
											"// Define possible values for emission_unit_id\r",
											"const emissionPossibleValues = [6, 7, 8, 9, 10, 11, 58, 65, 69];\r",
											"const randomEmissionIndex = Math.floor(Math.random() * emissionPossibleValues.length);\r",
											"const emission_unit_id = emissionPossibleValues[randomEmissionIndex];\r",
											"pm.globals.set(\"emission_unit_id\", emission_unit_id.toString());\r",
											"\r",
											"// Define possible values for consumption\r",
											"const consumptionPossibleValues = [22, 23, 34];\r",
											"const randomconsumptionIndex = Math.floor(Math.random() * consumptionPossibleValues.length);\r",
											"const consumption_unit_id = consumptionPossibleValues[randomconsumptionIndex];\r",
											"pm.globals.set(\"consumption_unit_id\", emission_unit_id.toString());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 263,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"year\": \"{{year}}\",\r\n            \"transportation_mode_id\": {{Transaportation_Mode_ID}},\r\n            \"source\": null,\r\n            \"web\": null,\r\n            \"emission_unit_id\": 8,\r\n            \"consumption_unit_id\": 22,\r\n            \"fuel_type_id\": 16,\r\n            \"remarks\": null,\r\n            \"co2e\": {{randomDecimal}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const yearOptions = [2020, 2021, 2022, 2023, 2024, 2025, 2026];\r",
											"const yearRandomIndex = Math.floor(Math.random() * yearOptions.length);\r",
											"const yearRandomValue = yearOptions[yearRandomIndex];\r",
											"pm.globals.set(\"year\", yearRandomValue);\r",
											"\r",
											"\r",
											"// Define a function to generate a random decimal number within a specified range\r",
											"function getRandomDecimal(min, max, decimalPlaces) {\r",
											"  const rand = Math.random() * (max - min) + min;\r",
											"  return rand.toFixed(decimalPlaces);\r",
											"}\r",
											"\r",
											"// Set the desired range and decimal places for the random number (change values as needed)\r",
											"const minNumber = 0.1;\r",
											"const maxNumber = 20.0;\r",
											"const decimalPlaces = 2; // Adjust this value to set the number of decimal places\r",
											"\r",
											"// Generate the random decimal number and store it in an environment variable\r",
											"pm.environment.set(\"randomDecimal\", getRandomDecimal(minNumber, maxNumber, decimalPlaces));\r",
											"\r",
											"\r",
											"// Define possible values for emission_unit_id\r",
											"const emissionPossibleValues = [6, 7, 8, 9, 10, 11, 58, 65, 69];\r",
											"const randomEmissionIndex = Math.floor(Math.random() * emissionPossibleValues.length);\r",
											"const emission_unit_id = emissionPossibleValues[randomEmissionIndex];\r",
											"pm.globals.set(\"emission_unit_id\", emission_unit_id.toString());\r",
											"\r",
											"// Define possible values for consumption\r",
											"const consumptionPossibleValues = [22, 23, 34];\r",
											"const randomconsumptionIndex = Math.floor(Math.random() * consumptionPossibleValues.length);\r",
											"const consumption_unit_id = consumptionPossibleValues[randomconsumptionIndex];\r",
											"pm.globals.set(\"consumption_unit_id\", emission_unit_id.toString());\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Commute_Fuel_Type_ID}},\r\n            \"year\": \"{{year}}\",\r\n            \"transportation_mode_id\": {{Transaportation_Mode_ID}},\r\n            \"source\": null,\r\n            \"web\": null,\r\n            \"emission_unit_id\": 7,\r\n            \"consumption_unit_id\": 22,\r\n            \"fuel_type_id\": 16,\r\n            \"remarks\": null,\r\n            \"co2e\": {{randomDecimal}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=263",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "263"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Language translation",
					"item": [
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/language_translation/language?page=2&per_page=10",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/language_translation/language",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/language_translation/language?filter=not found",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language"
									],
									"query": [
										{
											"key": "filter",
											"value": "not found"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/language_translation/language_json/ES",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language_json",
										"ES"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"lang_id\": 3,\r\n            \"module_name\": \"Admin\",\r\n            \"key\": \"PARIMERY_KEY_COLUMN_NOT_EXISTS\",\r\n            \"en\": \"Parent Key column not updated in fields table\",\r\n            \"zh-TW\": \"\",\r\n            \"zh-CN\": \"\",\r\n            \"es\": \"\",\r\n            \"pt\": \"\",\r\n            \"ja\": \"エラーが発生しました\",\r\n            \"ko\": \"\",\r\n            \"id\": \"\",\r\n            \"ms\": \"\",\r\n            \"vi\": \"\",\r\n            \"th\": \"\",\r\n            \"km\": \"\"\r\n        },\r\n        {\r\n            \"lang_id\": 9,\r\n            \"module_name\": \"Admin\",\r\n            \"key\": \"AN_ERROR_OCCURED\",\r\n            \"en\": \"An Error Occured\",\r\n            \"zh-TW\": \"\",\r\n            \"zh-CN\": \"发生错误\",\r\n            \"es\": \"\",\r\n            \"pt\": \"\",\r\n            \"ja\": \"エラーが発生しました\",\r\n            \"ko\": \"\",\r\n            \"id\": \"TERJADI KESALAHAN\",\r\n            \"ms\": \"\",\r\n            \"vi\": \"XẢY RA LỖI\",\r\n            \"th\": \"เกิดข้อผิดพลาด\",\r\n            \"km\": \"\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/language_translation/language/bulk-update",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language",
										"bulk-update"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Email template",
					"item": [
						{
							"name": "Form Structure",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/form-structure/fields/email_template",
									"host": [
										"{{url}}"
									],
									"path": [
										"form-structure",
										"fields",
										"email_template"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Email_templates_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Email_templates_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/list/email_template",
									"host": [
										"{{url}}"
									],
									"path": [
										"list",
										"email_template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//name\r",
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"//title\r",
											"// Set up a set to store generated titles\r",
											"const generatedTitles = new Set();\r",
											"\r",
											"// Function to generate a random title\r",
											"function generateLocationTitle() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationTitle = `Location ${randomString}`;\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"// Function to generate a unique location title\r",
											"function generateUniqueLocationTitle() {\r",
											"    let locationTitle = generateLocationTitle();\r",
											"    while (generatedTitles.has(locationTitle)) {\r",
											"        locationTitle = generateLocationTitle();\r",
											"    }\r",
											"    generatedTitles.add(locationTitle);\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"const locationTitle = generateUniqueLocationTitle();\r",
											"pm.environment.set(\"title\", locationTitle);\r",
											"// pm.globals.get(\"title\", locationTitle);\r",
											"console.log(locationTitle);\r",
											"\r",
											"//content\r",
											"// Set up a set to store generated content\r",
											"const generatedContent = new Set();\r",
											"\r",
											"// Function to generate a random content\r",
											"function generateLocationContent() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationContent = `Location ${randomString}`;\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"// Function to generate unique location content\r",
											"function generateUniqueLocationContent() {\r",
											"    let locationContent = generateLocationContent();\r",
											"    while (generatedContent.has(locationContent)) {\r",
											"        locationContent = generateLocationContent();\r",
											"    }\r",
											"    generatedContent.add(locationContent);\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"const locationContent = generateUniqueLocationContent();\r",
											"pm.environment.set(\"content\", locationContent);\r",
											"// pm.globals.get(\"content\", locationContent);\r",
											"console.log(locationContent);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 261,\r\n    \"subscriber_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{name}}\",\r\n            \"title\": \"{{title}}\",\r\n            \"content\": \"{{content}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//name\r",
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"//title\r",
											"// Set up a set to store generated titles\r",
											"const generatedTitles = new Set();\r",
											"\r",
											"// Function to generate a random title\r",
											"function generateLocationTitle() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationTitle = `Location ${randomString}`;\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"// Function to generate a unique location title\r",
											"function generateUniqueLocationTitle() {\r",
											"    let locationTitle = generateLocationTitle();\r",
											"    while (generatedTitles.has(locationTitle)) {\r",
											"        locationTitle = generateLocationTitle();\r",
											"    }\r",
											"    generatedTitles.add(locationTitle);\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"const locationTitle = generateUniqueLocationTitle();\r",
											"pm.environment.set(\"title\", locationTitle);\r",
											"// pm.globals.get(\"title\", locationTitle);\r",
											"console.log(locationTitle);\r",
											"\r",
											"//content\r",
											"// Set up a set to store generated content\r",
											"const generatedContent = new Set();\r",
											"\r",
											"// Function to generate a random content\r",
											"function generateLocationContent() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationContent = `Location ${randomString}`;\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"// Function to generate unique location content\r",
											"function generateUniqueLocationContent() {\r",
											"    let locationContent = generateLocationContent();\r",
											"    while (generatedContent.has(locationContent)) {\r",
											"        locationContent = generateLocationContent();\r",
											"    }\r",
											"    generatedContent.add(locationContent);\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"const locationContent = generateUniqueLocationContent();\r",
											"pm.environment.set(\"content\", locationContent);\r",
											"// pm.globals.get(\"content\", locationContent);\r",
											"console.log(locationContent);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Email_templates_ID}},\r\n            \"name\": \"{{name}}\",\r\n            \"title\": \"{{title}}\",\r\n            \"content\": \"{{content}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=2&form_id=261",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "2"
										},
										{
											"key": "form_id",
											"value": "261"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{refresh_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}