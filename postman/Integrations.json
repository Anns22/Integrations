{
	"info": {
		"_postman_id": "a451ed92-9855-457b-a896-cf978fb61e44",
		"name": "CI/CD",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Email Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ac3dfe27-db27-4117-b0bd-d8f9b9ece979"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"Otp\", data.otp);"
								],
								"type": "text/javascript",
								"id": "4fd4fc12-eb18-46bd-92c0-79ba20744d32"
							}
						}
					],
					"id": "4420d0c6-24f0-4c8d-81c0-45fb09bdf105",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"annsherry+api@agilecyber.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/login/auth/magic-link"
					},
					"response": []
				},
				{
					"name": "Get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"token\", data.token);\r",
									"\r",
									" \r",
									"\r",
									"if (data.data && Array.isArray(data.data) && data.data.length > 0) {\r",
									"\r",
									"  const deviceList = data.data;\r",
									"\r",
									"  const deviceId = deviceList[0].device_id; // Assuming the device ID is located in the first item of the list\r",
									"\r",
									"  pm.globals.set(\"device_id\", deviceId);\r",
									"\r",
									"  \r",
									"\r",
									"} else {\r",
									"\r",
									"  console.log('Invalid response structure or empty data array');\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"id": "049f27fd-602b-43c2-b4d8-1d52b30db405"
							}
						}
					],
					"id": "992d325c-17c7-4261-86ae-191744ce2562",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{login_url}}/auth/get_token_test/annsherry+api@agilecyber.com"
					},
					"response": []
				},
				{
					"name": "Token Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"//console.log(data);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", data.access_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"device_id\", data.device_id);\r",
									""
								],
								"type": "text/javascript",
								"id": "3de50420-3ec3-4752-8062-e64f1d21a8d5"
							}
						}
					],
					"id": "9fd3d596-6279-436b-a5f8-93017fe91638",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{token}}\",\r\n    \"device_id\": \"{{device_id}}\",\r\n    \"otp\": \"{{Otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{login_url}}/auth/token"
					},
					"response": []
				},
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);\r",
									"\r",
									"postman.setEnvironmentVariable(\"access_token\", data.access_token);"
								],
								"type": "text/javascript",
								"id": "8b0ca6bf-1c2e-408e-b3b8-4c75a609cbe4"
							}
						}
					],
					"id": "cbdd86b1-5e6a-4067-863b-60c676a28348",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"token\": \"{{refresh_token}}\",\r\n    \"device_id\": \"{{device_id}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{login_url}}/auth/refresh_token"
					},
					"response": []
				}
			],
			"id": "ad3973d3-d82a-4c71-93fd-27d8bfcc8a31"
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Location",
					"item": [
						{
							"name": "Form Structure",
							"id": "90db6c94-ba62-4f90-89be-2d9ba8efdd0b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{refresh_token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/consumers"
							},
							"response": []
						},
						{
							"name": "Location Tree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Location_type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Location_type_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "b3a91e05-1f43-4a1e-a62f-de07685740a2"
									}
								}
							],
							"id": "24a19375-68c8-4af6-80c5-73b788a4c6b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/consumers"
							},
							"response": []
						},
						{
							"name": "Add Location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();\r",
											"\r",
											"// Function to generate a random location name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}\r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"Location_Name\", locationName);\r",
											"pm.globals.set(\"Location_Name\", locationName);\r",
											"console.log(locationName);\r",
											"\r",
											"// Add some characters to the location name\r",
											"const modifiedLocationName = `${locationName}-Modified`;\r",
											"const secondparent = `${locationName}-parent_name`;\r",
											"const secondChild = `${locationName}-secondChild`;\r",
											"\r",
											"// Function to generate a unique second child name\r",
											"function generateUniqueSecondChildName(prefix) {\r",
											"    let secondChild = `${prefix}-secondChild`;\r",
											"    let counter = 1;\r",
											"    while (generatedNames.has(secondChild)) {\r",
											"        secondChild = `${prefix}-secondChild-${counter}`;\r",
											"        counter++;\r",
											"    }\r",
											"    generatedNames.add(secondChild);\r",
											"    return secondChild;\r",
											"}\r",
											"\r",
											"const secondChild1 = generateUniqueSecondChildName(locationName);\r",
											"const secondChild2 = generateUniqueSecondChildName(locationName);\r",
											"\r",
											"\r",
											"// Save the modified location name to a Postman environment variable\r",
											"pm.environment.set(\"modifiedLocationName\", modifiedLocationName);\r",
											"pm.environment.set(\"secondparent\", secondparent);\r",
											"pm.environment.set(\"secondChild1\", secondChild1);\r",
											"pm.environment.set(\"secondChild2\", secondChild2);\r",
											"\r",
											"// Log the request body key-value pairs\r",
											"console.log(pm.request.body);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "ca2c6af3-a3cd-4767-95a8-b0e6e8920b1e"
									}
								}
							],
							"id": "20be83f8-ef33-41fb-a9f7-a685b361ce7e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 52,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"parent_location_id\": 1,\r\n            \"name\": \"{{Location_Name}}\",\r\n            \"country_id\": 94,\r\n            \"province\": \"1\",\r\n            \"enabled\": null,\r\n            \"location_type_id\":null,\r\n            \"lockdown_date\":null\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Edit Location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"New_location_Name\", uniqueName);\r",
											"pm.globals.set(\"New_location_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"New_location_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "0e112293-d0bf-4181-8e81-feb59c49853d"
									}
								}
							],
							"id": "b7671f84-a963-463e-9279-62c6e163bd4b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": \"{{Location_type_ID}}\",\r\n            \"parent_location_id\":  1,\r\n            \"name\": \"{{New_location_Name}}\",\r\n            \"country_id\": 94,\r\n            \"province\": \"1\",\r\n            \"enabled\": null,\r\n            \"location_type_id\":null,\r\n            \"lockdown_date\":null\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=52&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "52"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "8bb6b732-b1cf-494e-83e1-72f88ace03ed"
				},
				{
					"name": "Department",
					"item": [
						{
							"name": "Form structure",
							"id": "eec2d18f-28fa-4d32-86ba-63d89670153b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/departments"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Department_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Department_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "a973ead3-0aa0-4000-ae76-cc62971d6a2c"
									}
								}
							],
							"id": "11441f0d-e621-4110-b546-27edaac4c93d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/departments"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Department_name\", uniqueName);\r",
											"pm.globals.set(\"Department_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Department_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "92c23d77-7ea8-4ade-8039-91b9a6907193"
									}
								}
							],
							"id": "3741d93f-7653-41cc-9dff-24c8f7cac047",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 102,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"consumer_id\": 1,\r\n            \"name\": \"{{Department_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Department_name\", uniqueName);\r",
											"pm.globals.set(\"Department_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Department_name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "99fe03b6-90d9-417d-bee9-fc9de2c75ce1"
									}
								}
							],
							"id": "fffe8baa-bbd4-48a1-ae7b-c73749986753",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Department_ID}},\r\n            \"consumer_id\": 1,\r\n            \"name\": \"{{Department_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=102",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "102"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7dc83ceb-13c0-4af4-b63e-db7dc1c0d3b9"
				},
				{
					"name": "Currencies",
					"item": [
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Currencies_id\", data.data[0]['id']); \r",
											""
										],
										"type": "text/javascript",
										"id": "8502637b-21ee-48af-b758-c3cd345a77b3"
									}
								}
							],
							"id": "7a71df38-6acc-4b17-8e46-5362d84a564e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/currencies"
							},
							"response": []
						}
					],
					"id": "3f385044-4d36-499d-a11e-3bffe0132e4d"
				},
				{
					"name": "Fine type",
					"item": [
						{
							"name": "Form structure",
							"id": "61333905-7250-4a06-b85e-1817b69a0e2b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/fine_types"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Finetype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Finetype_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "ea3bf0c1-78e0-4a51-b7a2-3e21a564732f"
									}
								}
							],
							"id": "331fedb4-211b-4d70-a276-539137a76e71",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/fine_types"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Fine_Type\", uniqueName);\r",
											"pm.globals.set(\"Fine_Type\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Fine_Type\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "3f9092b5-d98a-4fc3-a834-c2ad129b27be"
									}
								}
							],
							"id": "8002dd44-856e-4ea6-adba-3dcc267c8558",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 76,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Fine_Type}}\",\r\n            \"remarks\": \"Toll gate charges.\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"id": "1efc198d-8291-48cf-bd93-1397669af96b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"data\": [\r\n        {\r\n            \"id\":{{Finetype_ID}},\r\n            \"name\": \"{{Fine_Type}}+update\"\r\n           \r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=76",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "76"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cc0c1b91-d941-4df3-b1a2-2b5f3f4b0226"
				},
				{
					"name": "Disposal Methods",
					"item": [
						{
							"name": "Form structure",
							"id": "be9ccc90-3455-4261-86d3-a53dd85cf189",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/disposal_methods"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Disposal_Method_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Disposal_Method_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "ae5378ca-d995-486f-9e7a-8676f8f4db52"
									}
								}
							],
							"id": "74e065b5-728f-4ee6-aeec-3a02651b2081",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/disposal_methods"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const sort_order = Math.floor(Math.random() * 100) + 1;\r",
											"pm.globals.set(\"sort_order\", sort_order);\r",
											"\r",
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Disposal_Name\", uniqueName);\r",
											"pm.globals.set(\"Disposal_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Disposal_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "3411352d-8ddf-47c9-8bf4-bb80629409ac"
									}
								}
							],
							"id": "df4c5a57-0556-495d-9ad9-960c1587d612",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 77,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Disposal_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"id": "a6375cb6-001c-427c-a6d5-37526fbde6f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"data\": [\r\n        {\r\n            \"id\": {{Disposal_Method_ID}},\r\n            \"name\": \"{{Disposal_Name}}+update\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=77",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "77"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "01bccdda-dff1-4591-b1e8-1b7aa2c5171a"
				},
				{
					"name": "Water report type",
					"item": [
						{
							"name": "Form structure",
							"id": "295e591b-30c2-4566-8aed-74fdebc9b446",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/water_report_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Water_report_type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Water_report_type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "ffc0b246-f308-42c1-9d8d-72e379e60e82"
									}
								}
							],
							"id": "40d7b695-166b-483b-818e-df75dcdec139",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/water_report_types"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Waterreport_Type\", uniqueName);\r",
											"pm.globals.set(\"Waterreport_Type\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Waterreport_Type\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "a335acea-2885-41b4-b1bc-23202e6ec1f3"
									}
								}
							],
							"id": "6f5ead2e-f9e0-4fc8-8336-e6bb7dae6c96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 79,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Waterreport_Type}}\",\r\n            \"remarks\": \"test_water_report\",\r\n            \"domain_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "73505bb7-de10-4793-bf05-4833e970d40a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Water_report_type_ID}},\r\n            \"name\": \"{{Waterreport_Type}}+update\",\r\n            \"remarks\": \"test_water_report\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=79",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "79"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "41850cb9-feb2-4bac-be5f-2c8fea00c421"
				},
				{
					"name": "Operational risk status",
					"item": [
						{
							"name": "Form structure",
							"id": "ba8421b7-783c-4a44-801c-b4ecaca7d414",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/operational_risk_statuses"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Operational_Risk_status_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Operational_Risk_status_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "2504c246-22cb-4080-ad42-b5308404b4a3"
									}
								}
							],
							"id": "4513c576-1056-4ff5-890b-a434bc254b62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/operational_risk_statuses"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"pm.globals.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operationalrisk_status_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "479e146e-52e2-4a43-8e44-64fb795cbc79"
									}
								}
							],
							"id": "2a6cf8c3-0419-4c6f-b027-bb6c97a6ea5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 80,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Operationalrisk_status_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"pm.globals.set(\"Operationalrisk_status_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operationalrisk_status_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "635c47fe-8024-45c9-a552-eb567f7ce866"
									}
								}
							],
							"id": "5266be55-5452-4cb2-8e42-95bc442fde12",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Operational_Risk_status_ID}},\r\n            \"name\": \"{{Operationalrisk_status_name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=80",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "80"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "73e2154e-002b-41a3-86f6-db068ee09501"
				},
				{
					"name": "Supply chain risk status configuation",
					"item": [
						{
							"name": "Form Structure",
							"id": "6646af19-7d66-4cc3-86ad-f13c3e335374",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/supply_chain_risk_statuses"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Supplychain_risk_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Supplychain_risk_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d6d3f2f8-4949-49a6-8f0a-0db5935c9d4b"
									}
								}
							],
							"id": "91df3ed5-958f-435a-9cc7-8fa4f8f106c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/supply_chain_risk_statuses"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Supplychain_risk_name\", uniqueName);\r",
											"pm.globals.set(\"Supplychain_risk_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Supplychain_risk_name\", uniqueName);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "9f3976fc-f633-45b5-9092-1c320e880673"
									}
								}
							],
							"id": "1159f05f-1878-4023-b34f-9aa3d780f01a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 81,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Supplychain_risk_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "b1114eb5-853a-4959-a49f-3b01d2350a17",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Supplychain_risk_ID}},\r\n            \"name\": \"{{Supplychain_risk_name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=81",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "81"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "d4f7c647-7709-426e-8305-6e84635af598"
				},
				{
					"name": "Operational Issue category",
					"item": [
						{
							"name": "Form Structure",
							"id": "82a63bc5-74b1-4649-85ec-72e8e868453a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/issue_categories"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Operational_Issuecategory_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Operational_Issuecategory_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3752dde1-7836-4db3-803b-8667119c636e"
									}
								}
							],
							"id": "6b496cf3-dc9e-4d9f-bb09-9dc8b940f9b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/issue_categories"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operational_Issue_Category_Name\", uniqueName);\r",
											"pm.globals.set(\"Operational_Issue_Category_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operational_Issue_Category_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "cc1dd29b-6850-4238-a934-5c2fad481729"
									}
								}
							],
							"id": "9838f2f2-4f18-488e-a4fe-0d9d1bfc3ac9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 83,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Operational_Issue_Category_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "5dfa0fba-6269-41b1-9e26-57cd8f6f654d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Operational_Issuecategory_ID}},\r\n            \"name\": \"{{Operational_Issue_Category_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=83",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "83"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "34a5a867-6f50-46e8-8f16-077d423938a9"
				},
				{
					"name": "Operational Issue sub type",
					"item": [
						{
							"name": "Form Structure",
							"id": "63287494-e923-4f82-b650-db49ac3c110e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/issue_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Operational_Issuesubtypes_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Operational_Issuesubtypes_ID\", data.data[0]['id']);\r",
											"\r",
											"postman.setEnvironmentVariable(\"opissue_category_id\", data.data[0]['issue_category_id']); \r",
											"pm.globals.set(\"opissue_category_id\", data.data[0]['issue_category_id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "25777a5c-fae2-407a-ae4e-b00c7f59e217"
									}
								}
							],
							"id": "8fdf8026-f490-4585-a0b7-d4cd7d29a3ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/issue_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Operational_Issue_type_Name\", uniqueName);\r",
											"pm.globals.set(\"Operational_Issue_type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Operational_Issue_type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "9f3f1def-7102-4ad4-8950-c3dbd02ef979"
									}
								}
							],
							"id": "cd9ce404-42b1-4955-92df-c9a0fd426b4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 84,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Operational_Issue_type_Name}}\",\r\n            \"issue_category_id\": {{opissue_category_id}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "1559cdf8-0b3c-45ea-bc3a-56737c94350e"
									}
								}
							],
							"id": "fe59f093-b752-4971-91cd-6e97068de77d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Operational_Issuesubtypes_ID}},\r\n            \"name\": \"{{Operational_Issue_type_Name}}+update\",\r\n            \"issue_category_id\": {{Operational_Issuecategory_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=84",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "84"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "15429a85-592a-45db-8382-1f41d3b4a4a1"
				},
				{
					"name": "Supply chain Risk types",
					"item": [
						{
							"name": "Form Structure",
							"id": "c1c90462-9e33-46a7-944b-eef951e2f87b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/report_categories"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Supply_chain_Issue_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Supply_chain_Issue_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "62d264db-9da9-4226-b2a2-e61477c2ceef"
									}
								}
							],
							"id": "144feae5-7b9c-4a51-af8a-bc1fc3d4b602",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/report_categories"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Supply_Chain_Issue_Name\", uniqueName);\r",
											"pm.globals.set(\"Supply_Chain_Issue_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Supply_Chain_Issue_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "6e0c92a7-57c9-45b6-9fbe-17e11f0c127f"
									}
								}
							],
							"id": "7560f649-b7a5-4a70-bda2-74b4b1737829",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 82,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Supply_Chain_Issue_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "f8178e4c-905b-4927-89a2-4d626f476aa9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Supply_chain_Issue_ID}},\r\n            \"name\": \"{{Supply_Chain_Issue_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=82",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "82"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e5e47fb2-3a3f-41e0-bab6-d9050a08f3b8"
				},
				{
					"name": "Supply chain Issue subtype",
					"item": [
						{
							"name": "Form Structure",
							"id": "fe6ad2fd-8d7a-47c8-ae98-c5294ac1ef13",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/report_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Supply_chain_Issue_Subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Supply_chain_Issue_Subtype_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "00837706-7743-4d0d-97d2-4ffe2e935e88"
									}
								}
							],
							"id": "092a0a64-340b-40fd-a576-2e7c7f8155ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/report_types"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" // Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Supply_chain_name\", uniqueName);\r",
											"pm.globals.set(\"Supply_chain_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Supply_chain_name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "c8a86f09-882d-4a0f-9d2c-515b0949b5f9"
									}
								}
							],
							"id": "2919d4ec-fe20-486a-a82c-0edfea68b34b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 85,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Supply_chain_name}}\",\r\n            \"report_category_id\": {{Supply_chain_Issue_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "17b03761-132b-4b6d-a920-974ed0c119ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Supply_chain_Issue_Subtype_ID}},\r\n            \"name\": \"{{Supply_chain_name}}+update\",\r\n            \"report_category_id\": {{Supply_chain_Issue_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=85",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "85"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "442e1d9e-e3b7-4463-9348-44b6fd6dce96"
				},
				{
					"name": "CSR & Env Invs types",
					"item": [
						{
							"name": "Form Structure",
							"id": "4862df92-15e8-4388-a979-f60bc8e2bf2a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/improvement_categories"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"CSR_ENV_INV_type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "6179e1e2-ce21-45e5-aa4b-36b867875e42"
									}
								}
							],
							"id": "41ab2f58-3812-4421-ba89-ef043b94306e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/improvement_categories"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" // Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"CSR_ENV_INV_Name\", uniqueName);\r",
											"pm.globals.set(\"CSR_ENV_INV_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "4ff93039-101d-498d-bf73-43b562d141f7"
									}
								}
							],
							"id": "1f260a86-cfc0-46c7-9cda-bd961d1e44ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 90,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{CSR_ENV_INV_Name}}\",\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "3d90a513-e1bc-476a-ae93-aad9b8f92844",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{CSR_ENV_INV_type_ID}},\r\n            \"name\": \"{{CSR_ENV_INV_Name}}+update\",\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=90",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "90"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b75384c0-0c08-4183-a79f-b715dd352a07"
				},
				{
					"name": "CSR & Env Invs sub types",
					"item": [
						{
							"name": "Form Structure",
							"id": "df17e01d-ff5d-47cd-82e7-cbb94b746db4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/improvement_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"CSR_ENV_INV_subtype_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "f7464d8e-a214-4660-a58f-8ee9a05c40e2"
									}
								}
							],
							"id": "9777ee87-d87c-4a95-9893-6b10d0ade027",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/improvement_types"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" // Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"CSR_ENV_INV_Sub_Name\", uniqueName);\r",
											"pm.globals.set(\"CSR_ENV_INV_Sub_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"CSR_ENV_INV_Sub_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "64f28a61-6110-41d9-b2db-efa34e490af7"
									}
								}
							],
							"id": "5998670b-cc9f-4d3d-a971-49f542ce7677",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 92,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{CSR_ENV_INV_Sub_Name}}\",\r\n            \"improvement_category_id\":{{CSR_ENV_INV_type_ID}},\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "b3583d46-4427-40ac-b424-0edd4e225b04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{CSR_ENV_INV_subtype_ID}},\r\n            \"name\": \"{{CSR_ENV_INV_Sub_Name}}+update\",\r\n            \"improvement_category_id\":{{CSR_ENV_INV_type_ID}},\r\n            \"remarks\": \"remarks\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=92",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "92"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c06c7f6f-a366-4b04-82b8-46a7fd8d7c98"
				},
				{
					"name": "Engine types",
					"item": [
						{
							"name": "Form structure API",
							"id": "08b18649-e35e-47e4-bef2-6b94121f6dfd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/engine_types"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Engine_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Engine_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "16cd533f-934b-4627-90c1-503f2bc33db6"
									}
								}
							],
							"id": "f12bb167-8eff-407c-9678-fe4fb2457e46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/engine_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Engine_Name\", uniqueName);\r",
											"pm.globals.set(\"Engine_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Engine_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "78ca0496-393a-4f3b-a9d2-3d671503e8be"
									}
								}
							],
							"id": "67d6fa42-6e4e-4783-a335-f002378f1ab0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\":99,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\":\"{{Engine_Name}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "update",
							"id": "5532eaa6-50f4-4544-b3d9-7c967c391b88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n    {\r\n        \"id\": {{Engine_Type_ID}},\r\n        \"name\": \"{{Engine_Name}}+update\"\r\n    }\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=99&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "99"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "41cb60ec-719f-4166-852d-794140625d42"
				},
				{
					"name": "Customer Accident type",
					"item": [
						{
							"name": "Form structure",
							"id": "b3fc915d-47d6-4e92-9669-9a42e165c5e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/customer_accident_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"customer_accident_types_id\", data.data[0]['id']); \r",
											"pm.globals.set(\"customer_accident_types_id\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "708879c6-da2b-474e-b41b-0e7a289be4e1"
									}
								}
							],
							"id": "1842f9f6-bd45-4ff3-9af9-628a8286253c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/customer_accident_types"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Accident_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Accident_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Accident_Type_Name\", uniqueName);\r",
											"\r",
											"const descriptions = [\r",
											"  \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\r",
											"  \"Sed ut perspiciatis unde omnis iste natus error sit voluptatem.\",\r",
											"  \"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium.\",\r",
											"  \"Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit.\",\r",
											"  \"Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet.\",\r",
											"  \"Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam.\"\r",
											"];\r",
											"\r",
											"const randomIndex = Math.floor(Math.random() * descriptions.length);\r",
											"let randomDescription = descriptions[randomIndex];\r",
											"pm.globals.set(\"description\", randomDescription);\r",
											""
										],
										"type": "text/javascript",
										"id": "642ad866-e12d-4d04-9369-53816077228a"
									}
								}
							],
							"id": "e7c41e09-bbb7-445d-ae7d-15a72e33c658",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 106,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Accident_Type_Name}}\",\r\n            \"description\": \"{{description}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "652697b2-7694-4e6e-a149-4c83e15fd39b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{customer_accident_types_id}},\r\n            \"name\": \"{{Accident_Type_Name}}+update\",\r\n            \"description\": \"{{description}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=106&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "106"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "fef5f355-7587-429d-8dca-0687b162efb5"
				},
				{
					"name": "Waste Marpol Disposal",
					"item": [
						{
							"name": "Form structure",
							"id": "2008912f-f2e5-4c87-bc92-9fb10fbe7eaa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/waste_marpol_disposals"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Waste_Marpoldis_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Waste_Marpoldis_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "89c9e2df-2a55-4fec-b0e6-41052f004490"
									}
								}
							],
							"id": "810c3284-b603-4bff-969f-ec0369ec5e9c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/waste_marpol_disposals"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const existingNames = pm.globals.get('existing_names') || [];\r",
											"let uniqueName;\r",
											"\r",
											"do {\r",
											"  const randomText = Array.from({ length: 4 }, () => getRandomCharacter('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')).join('');\r",
											"  const randomNumber = getRandomNumber(1000, 9999);\r",
											"  uniqueName = randomText + randomNumber.toString();\r",
											"} while (existingNames.includes(uniqueName));\r",
											"\r",
											"existingNames.push(uniqueName);\r",
											"pm.globals.set('Color_Name', uniqueName);\r",
											"\r",
											"function getRandomCharacter(characters) {\r",
											"  return characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"}\r",
											"\r",
											"function getRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"function generateColorCode() {\r",
											"  const characters = '0123456789ABCDEF';\r",
											"  let colorCode = '#';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"    colorCode += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"  }\r",
											"\r",
											"  return colorCode;\r",
											"}\r",
											"\r",
											"const existingColorCodes = pm.globals.get('existing_color_codes') || [];\r",
											"let uniqueColorCode;\r",
											"\r",
											"do {\r",
											"  uniqueColorCode = generateColorCode();\r",
											"} while (existingColorCodes.includes(uniqueColorCode));\r",
											"\r",
											"existingColorCodes.push(uniqueColorCode);\r",
											"pm.globals.set('Color_Code', uniqueColorCode);\r",
											"\r",
											"  // Generate a random positive number\r",
											"    const randomNumber = Math.floor(Math.random() * 1000) + 1;\r",
											"\r",
											"    // Check that the number is positive\r",
											"    pm.test('Number is positive', function () {\r",
											"        pm.expect(pm.variables.get('sort_order')).to.be.above(0);\r",
											"    });\r",
											"\r",
											"   \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "1a13e516-172f-416d-aa03-7d51361c7951"
									}
								}
							],
							"id": "a7ee509d-a6d5-49f8-8e30-595c7ffc53a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 109,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Color_Name}}\",\r\n            \"color_code\": \"{{Color_Code}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						}
					],
					"id": "fce60882-783f-4f66-983f-f372b384a939"
				},
				{
					"name": "Tracking Categories",
					"item": [
						{
							"name": "Form structure",
							"id": "d07ecf42-9d06-49b2-a61e-443ce1a76891",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/tracking_categories"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Tracking_Category_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Tracking_Category_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "6284c1e1-d284-447a-80d0-d5bde029f182"
									}
								}
							],
							"id": "97a611b7-dd60-48b4-b771-a87c97f66f17",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/tracking_categories"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Tracking_category_Name\", uniqueName);\r",
											"pm.globals.set(\"Tracking_category_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Tracking_category_Name\", uniqueName);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "950e0eaa-008d-4a82-9610-6fe8682c6ce6"
									}
								}
							],
							"id": "23e2993c-7cd7-48e9-b240-122ad336394d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 112,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Tracking_category_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "e82630f9-383c-4714-8e41-08a1c0a1a834",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Tracking_Category_ID}},\r\n            \"name\": \"{{Tracking_category_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=112&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "112"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "fd3ff240-4dbf-44e2-9f7a-41a2699b7c97"
				},
				{
					"name": "Ethnicity",
					"item": [
						{
							"name": "form structure",
							"id": "43b43abe-1c93-4683-9b1f-6f57d7a05b81",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/ethnicities"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ethnicity_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Ethnicity_ID\", data.data[0]['id']);\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e4820492-0b0c-43ee-80bb-ecd800085ea0"
									}
								}
							],
							"id": "023e3227-79a4-46c1-9da6-6e147f1f0df0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/ethnicities"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Ethnicity_Name\", uniqueName);\r",
											"pm.globals.set(\"Ethnicity_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Ethnicity_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "e630e112-80d3-4745-b7b9-dfa09a6c1698"
									}
								}
							],
							"id": "3a556e29-7c98-41a7-945d-350862fb459f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 171,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Ethnicity_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "9f686de3-191a-499d-b4aa-b128796f6190"
									}
								}
							],
							"id": "9365a03d-a484-4493-8ffa-8c618a825cc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Ethnicity_ID}},\r\n            \"name\": \"{{Ethnicity_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=171",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "171"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b34da007-3872-4d86-bc3f-a9784ade385d"
				},
				{
					"name": "Coverage Type",
					"item": [
						{
							"name": "form structure",
							"id": "082e93b1-48d5-4254-a9b2-0d4b19bef6e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/coverage_categories"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Coverage_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Coverage_Type_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "72bd4690-0879-4952-abca-22be63ae6516"
									}
								}
							],
							"id": "0192bf1c-b978-46fd-9fff-d10ce7699ee7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/coverage_categories"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Coverage_Name\", uniqueName);\r",
											"pm.globals.set(\"Coverage_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Coverage_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "81987d4f-231d-43a5-8812-9835c0ef9ff5"
									}
								}
							],
							"id": "5ec2811e-5453-4c68-b950-0d119818cc30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 208,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Coverage_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate a random alphanumeric name\r",
											"function generateRandomName(length) {\r",
											"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"    result += characters.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"// Set the random name in the request parameter\r",
											"pm.variables.set('name', generateRandomName(10));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "7b197ce5-432b-4e42-b9d0-d233248d252f"
									}
								}
							],
							"id": "396abcc0-d4c9-4b26-a49a-6a12d5b3f9f0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Coverage_Type_ID}},\r\n            \"name\": \"{{Coverage_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=208",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "208"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0648007e-b9e5-4c59-a416-ba870c0df3ee"
				},
				{
					"name": "Coverage Sub-type Configuration List",
					"item": [
						{
							"name": "form structure",
							"id": "4cf58dca-617d-4997-87ff-39ab02673951",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/coverage_types"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Coverage_Subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Coverage_Subtype_ID\", data.data[0]['id']);\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "dc5ad32c-25dc-43ad-9b29-8c538e4bce50"
									}
								}
							],
							"id": "537a825c-6a0a-4b6a-a6bc-56e99bb2ba3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/coverage_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Coveragesubtype_Name\", uniqueName);\r",
											"pm.globals.set(\"Coveragesubtype_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Coveragesubtype_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "af335fe9-ffa4-452c-bb4b-5ea7ae41ee5f"
									}
								}
							],
							"id": "557a85e8-5993-4b7e-9463-5791462f837f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 174,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Coveragesubtype_Name}}\",\r\n            \"coverage_category_id\": {{Coverage_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "a2a7d4cb-0182-4255-97ce-903e3e9bd1fc"
									}
								}
							],
							"id": "6392818f-fab1-4596-85de-355ae315a89f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Coverage_Subtype_ID}},\r\n            \"name\": \"{{Coveragesubtype_Name}}+update\",\r\n            \"coverage_category_id\": {{Coverage_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=174",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "174"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "3024b18f-e249-4b85-bc30-80aaec96a557"
				},
				{
					"name": "Training Type Configuration List",
					"item": [
						{
							"name": "Form structure",
							"id": "f8c75f2b-e23b-4dc5-96df-708cf0978adb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/training_categories"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Training_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Training_Type_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "964f5cd8-b7dd-4ec9-8812-6c5752bc7614"
									}
								}
							],
							"id": "12e32375-5e55-4a8f-90eb-b3d2c5248d79",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/training_categories"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Training_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Training_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Training_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "9e1d036e-cca9-4326-8df1-96afea778c7d"
									}
								}
							],
							"id": "afb21e0d-eb5c-4f9b-824b-3abf3fb428e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 218,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Training_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "5030ba2e-586e-449b-b6cd-48b5343c03c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Training_Type_ID}},\r\n            \"name\": \"{{Training_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=218&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "218"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "615d6144-5a3c-4a29-a762-de0cb4d81eed"
				},
				{
					"name": "Training Subtype",
					"item": [
						{
							"name": "Form structure",
							"id": "99c67c7e-0cfd-4fa4-9fdb-61c89552a443",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/training_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Training_SubType_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Training_SubType_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "f45229e9-c0e8-48a6-862d-42ccaa758fe3"
									}
								}
							],
							"id": "5a963e7f-b35c-4194-9717-f61e851e42b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/training_types"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Training_SubType_Name\", uniqueName);\r",
											"pm.globals.set(\"Training_SubType_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Training_SubType_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "8d2b1eed-b1dd-470f-95ec-a81b8e4247e6"
									}
								}
							],
							"id": "d4a38f99-270e-4de2-9d1b-4c86ca46a139",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 175,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Training_SubType_Name}}\",\r\n            \"training_category_id\": {{Training_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "36acda2d-9303-430c-b402-48284cc0e8b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Training_Type_ID}},\r\n            \"name\": \"{{Training_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=218&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "218"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "f4fa400f-7ae1-4c1b-a37f-25dd88fd0575"
				},
				{
					"name": "Salary ranges",
					"item": [
						{
							"name": "Form structure",
							"id": "b4e9a267-2d5a-4f5a-b8a5-d5cad035594e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/salary_ranges"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Salary_Range_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Salary_Range_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "20825b75-5f41-460d-ba6b-f8824553d45a"
									}
								}
							],
							"id": "5bdb88c5-789f-4006-85f9-cbf7034fd62e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/salary_ranges"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Salary_Range_Name\", uniqueName);\r",
											"pm.globals.set(\"Salary_Range_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Salary_Range_Name\", uniqueName);\r",
											"\r",
											"// Generate a random two-digit numeric value\r",
											"const getRandomTwoDigitNumber = () => {\r",
											"  return Math.floor(Math.random() * 90) + 10; // Generates a random number between 10 and 99 (inclusive)\r",
											"};\r",
											"\r",
											"// Assign the generated value to a variable\r",
											"pm.variables.set(\"RandomNumber\", getRandomTwoDigitNumber().toString());\r",
											"pm.globals.set(\"RandomNumber\", getRandomTwoDigitNumber().toString());\r",
											""
										],
										"type": "text/javascript",
										"id": "beab7871-42c9-415d-a2ef-13c67331c50d"
									}
								}
							],
							"id": "502d9bd2-9f23-4b8d-b4ab-65c642263c9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 183,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Salary_Range_Name}}\",\r\n            \"upper_bound\":{{RandomNumber}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "518301f1-f8c9-4c23-a960-45896d9af334",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 183,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Salary_Range_ID}},\r\n            \"name\": \"{{Salary_Range_Name}}+update\",\r\n            \"upper_bound\":{{RandomNumber}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=183",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "183"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5aa683c0-758e-4d70-9092-f7bad86db2e8"
				},
				{
					"name": "Salary grade",
					"item": [
						{
							"name": "Form structure",
							"id": "ddb8ed36-9ff5-47a1-b86f-a02df6e02c7c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/salary_grades"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Salary_Grade_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Salary_Grade_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "09d8ad76-5ad0-4572-9805-428e49d4d90a"
									}
								}
							],
							"id": "7f2dfaf4-7361-4e5a-9344-7efa739504fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/salary_grades"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Salary_Grade_Name\", uniqueName);\r",
											"pm.globals.set(\"Salary_Grade_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Salary_Grade_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "8798222b-0a26-4725-8c42-67e23021fb83"
									}
								}
							],
							"id": "3f238541-a956-4489-8157-da4a5380bcb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 209,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Salary_Grade_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "e5328e54-4463-4f51-8d55-41d3961a919a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 209,\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Salary_Grade_ID}},\r\n            \"name\": \"{{Salary_Grade_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=209",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "209"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "4efd1b69-fbd3-44b2-8184-3392c6916578"
				},
				{
					"name": "Trade region",
					"item": [
						{
							"name": "Form structure",
							"id": "7f7afa36-a2f6-47d1-85c2-e3b0a0ec1802",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/trade_regions"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Trade_Regions_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Trade_Regions_ID\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4dd34c17-e8f0-4e3e-a5d4-74303967656e"
									}
								}
							],
							"id": "d48021e0-355b-4604-98ab-125e54583c34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/trade_regions"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const sort_order = Math.floor(Math.random() * 100) + 1;\r",
											"pm.globals.set(\"sort_order\", sort_order);\r",
											"\r",
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Trade_Region_Name\", uniqueName);\r",
											"pm.globals.set(\"Trade_Region_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Trade_Region_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "522b0c56-6fc9-45db-b237-6d54eade5e9b"
									}
								}
							],
							"id": "567197eb-1ad4-42b1-8cbb-96837142feeb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 217,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Trade_Region_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const sort_order = Math.floor(Math.random() * 100) + 1;\r",
											"pm.globals.set(\"sort_order_unique\", sort_order);"
										],
										"type": "text/javascript",
										"id": "9afd47ad-c38d-4b51-afa5-22d88f2b74e5"
									}
								}
							],
							"id": "e4f22a0c-36b3-4894-8f08-010ec09efdad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\" :{{Trade_Regions_ID}} ,\r\n           \"name\": \"{{Trade_Region_Name}}+update\",\r\n            \"sort_order\": {{sort_order_unique}}\r\n        }\r\n\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=217",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "217"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "86f1278b-72b9-4a63-88af-37481b084baf"
				},
				{
					"name": "Ocean port",
					"item": [
						{
							"name": "Form structure",
							"id": "32b0190f-4e43-452e-8a1e-9dc938ada209",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/ocean_ports"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ocean_Port_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Ocean_Port_ID\", data.data[0]['id']);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ocean_Port_Name_Dis\", data.data[0]['name']); \r",
											"pm.globals.set(\"Ocean_Port_Name_Dis\", data.data[0]['name']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "2f3aae19-a1cf-4f26-b377-9aabd579193e"
									}
								}
							],
							"id": "14be074e-a970-43af-bb38-03a073f3af7b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/ocean_ports"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Ocean_Name\", uniqueName);\r",
											"pm.globals.set(\"Ocean_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Ocean_Name\", uniqueName);\r",
											"\r",
											"\r",
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('random_alphabet_code', randomCode);\r",
											""
										],
										"type": "text/javascript",
										"id": "7cae1e5a-d80c-4064-844b-36524546226b"
									}
								}
							],
							"id": "834574e5-e68d-419f-8b4c-1b9ee40efa46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 189,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Ocean_Name}}\",\r\n            \"code\": \"{{random_alphabet_code}}\",\r\n            \"country_id\": {{Countries_ID}},\r\n            \"trade_region_id\": {{Trade_Regions_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('random_alphabet_code', randomCode);\r",
											""
										],
										"type": "text/javascript",
										"id": "089c1818-6ca0-4286-bb7b-39267dfcf08c"
									}
								}
							],
							"id": "235929c2-893e-48d0-865b-b94cfae79e1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\":{{Ocean_Port_ID}},\r\n           \"name\": \"{{Ocean_Name}}+update\",\r\n            \"code\": \"{{random_alphabet_code}}\",\r\n            \"country_id\": {{Countries_ID}},\r\n            \"trade_region_id\": {{Trade_Regions_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=189",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "189"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "6829ed5a-0967-4bfc-b4a4-432245d0051c"
				},
				{
					"name": "Gender",
					"item": [
						{
							"name": "form structure",
							"id": "c36522b5-f94b-479e-a326-451053583219",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/gender"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Gender_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Gender_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "a3ee1681-5aaa-43c3-a187-9094b4fb5c9e"
									}
								}
							],
							"id": "2e16edc3-eabf-4e86-815c-0c130f01bd39",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/gender"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Gender_Name\", uniqueName);\r",
											"pm.globals.set(\"Gender_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Gender_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "e4743990-9cd5-4490-9291-8baf8a508d30"
									}
								}
							],
							"id": "0ddf8bf1-72ae-47bb-a4ec-ed7389bf5910",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 213,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Gender_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "119899da-df31-4495-a341-76952fc214ed"
									}
								}
							],
							"id": "0a8f1d10-573b-466b-a293-3296b345ec5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Gender_ID}},\r\n            \"name\": \"{{Gender_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=213",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "213"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "7f05f3c8-9f40-430c-b714-b8a62ced1df2"
				},
				{
					"name": "Employee Type",
					"item": [
						{
							"name": "form structure",
							"id": "946e95fa-6aca-4de2-bca3-2071f614b790",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/employee_categories"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Employee_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Employee_Type_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3b88c268-56bb-4c2c-abda-e612404284c4"
									}
								}
							],
							"id": "f4c46d0b-6778-45c6-8a2d-a560e7cc3ef3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/employee_categories"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Employee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Employee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Employee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "6e69830c-361d-4553-b429-93773e7cdcaa"
									}
								}
							],
							"id": "b32a000b-b3c1-4b96-bbad-ae6d42eff0c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 211,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Employee_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Employee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Employee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Employee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "d9a1751f-e220-4b85-830c-b3cbb7ae76a9"
									}
								}
							],
							"id": "1bb2bbfa-bd13-4a40-be45-d11eecb64f20",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Employee_Type_ID}},\r\n            \"name\": \"{{Employee_Type_Name+update}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=211",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "211"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "3c4f5df4-92e9-4233-af05-0469268213af"
				},
				{
					"name": "Employee Sub-type Configuration List",
					"item": [
						{
							"name": "Form structure",
							"id": "c1fab9e2-ebe8-4c4d-b66a-f4d90b582cba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/employee_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Employee_Subtype_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Employee_Subtype_ID\", data.data[0]['id']);\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "269fea1b-6437-4fd0-924b-decc30491507"
									}
								}
							],
							"id": "ba39ce35-2f80-4d8a-90e9-2cb2d9d12019",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/employee_types"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Employee_SubType_Name\", uniqueName);\r",
											"pm.globals.set(\"Employee_SubType_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Employee_SubType_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "08a8f9fa-2cb6-4044-a6dc-31d7734a5f5e"
									}
								}
							],
							"id": "3f7d6cfb-5150-49e5-aa1c-d47e6495ce65",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 212,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Employee_SubType_Name}}\",\r\n            \"employee_category_id\": {{Employee_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "d144d54a-0539-4cfd-86cb-ee920d6f7334",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Employee_Subtype_ID}},\r\n            \"name\": \"{{Employee_SubType_Name}}+update\",\r\n            \"employee_category_id\": {{Employee_Type_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=212",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "212"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "85c5cfd6-2ef3-4026-8199-6f5c07072dfb"
				},
				{
					"name": "Contract Type",
					"item": [
						{
							"name": "form structure",
							"id": "d31e95e8-bfa0-4b6d-8b79-d826e663b7d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/contract_types"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Contract_Types_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Contract_Types_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "8f88be89-8fc6-435c-ac96-1e3b4d5fcd4c"
									}
								}
							],
							"id": "cabde960-c7fc-4731-a097-59e4f8a3a01f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/contract_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Contract_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Contract_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Contract_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "25547a2e-ec22-4dd0-971a-379adc456561"
									}
								}
							],
							"id": "1a7ee7e4-ef5e-4383-a2a5-9ae9a8730afa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 197,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Contract_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "a763f5d1-4dae-4b97-ae5e-6a6cc70a52c9"
									}
								}
							],
							"id": "252c163f-103d-48b0-bfb1-426caa2122e5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Contract_Types_ID}},\r\n            \"name\": \"{{Contract_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=197",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "197"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e4fc712a-0644-4941-9311-3cde5b8b7604"
				},
				{
					"name": "Education Levels",
					"item": [
						{
							"name": "form structure",
							"id": "b65dad98-a584-4a33-bbb1-00d6f872f491",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/education_levels"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "6d155856-e23a-4fab-8a61-989ea7572024"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"Education_level_ID\", data.data[0].id);\r",
											"pm.globals.set(\"Education_level_ID\", data.data[0].id);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "20dd7526-cb52-48c8-8753-2378173f72c9"
									}
								}
							],
							"id": "95e6a8af-8e11-4760-8b19-82cdd01c1d25",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/education_levels"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Education_Name\", uniqueName);\r",
											"pm.globals.set(\"Education_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Education_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "a6600220-6003-4a79-97db-d042ebdcba87"
									}
								}
							],
							"id": "5a77119c-f990-426e-9750-f6bec114c4ef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 219,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Education_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "d7c6dd7e-e664-43a1-88c1-367fc450f329",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Education_level_ID}},\r\n            \"name\": \"{{Education_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=219&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "219"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "52c2244c-5bec-433b-ac49-4b48a864cc61"
				},
				{
					"name": "Nationality Group",
					"item": [
						{
							"name": "form structure Copy",
							"id": "2a60d1eb-8438-478a-aabb-21b7ee5e943c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/nationality_groups"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Nationality_Group_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Nationality_Group_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "811f44b9-a5ca-43c2-bb5f-4bb8dba76142"
									}
								}
							],
							"id": "be4c0456-7c3a-4585-9b29-157aa67d2e9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/nationality_groups"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Nationality_Group_Name\", uniqueName);\r",
											"pm.globals.set(\"Nationality_Group_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Nationality_Group_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "0abc0a92-72c5-41b4-9e04-8214ccfadbb7"
									}
								}
							],
							"id": "c601ba47-e2ae-4fea-93ee-2c98e792966f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 196,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Nationality_Group_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "0f9f1a63-6e49-411e-953d-16a83004ec30"
									}
								}
							],
							"id": "51e95a0a-4e55-4d43-a158-a8305b15e788",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Nationality_Group_ID}},\r\n            \"name\": \"{{Nationality_Group_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=196",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "196"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5682833a-00e2-4ae7-bb65-f12021bd1aee"
				},
				{
					"name": "Nationalities",
					"item": [
						{
							"name": "Form Structure",
							"id": "69d01d16-714e-49db-a07f-f39ac511c94d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/nationalities"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Nationality_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Nationality_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4c73f82b-8ac0-4183-b9d5-a5b2cdf94dc2"
									}
								}
							],
							"id": "a7d3cf56-1416-4f4a-9c1c-9ac08995a3de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "{{url}}/list/nationalities"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Nationality\", uniqueName);\r",
											"pm.globals.set(\"Nationality\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Nationality\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "c3e4cf7f-6833-4b38-b70a-96ada0f36017"
									}
								}
							],
							"id": "e3078117-bda4-45fd-afce-42d4359d2c22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 194,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Nationality}}\",\r\n            \"nationality_group_id\": {{Nationality_Group_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=143&id=388",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "143"
										},
										{
											"key": "id",
											"value": "388"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"//nationality-id\r",
											"// Define the array of values\r",
											"\r",
											"const nationality_group_id = [1,2,3,45,6,7,8,9];\r",
											"// Pre-request script\r",
											"const randomIndex = Math.floor(Math.random() * nationality_group_id.length);\r",
											"pm.variables.set(\"nationality_group_id\", nationality_group_id[randomIndex]);"
										],
										"type": "text/javascript",
										"id": "897dfd59-9072-48d2-bf68-f64f93913675"
									}
								}
							],
							"id": "5d38fc2d-a0a6-45f1-a5bd-860fc4613da9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Nationality_ID}},\r\n            \"name\": \"{{Nationality}}+update\",\r\n            \"nationality_group_id\": {{Nationality_Group_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=194",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "194"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "07b17842-b0b3-4d37-8853-2de72d91756a"
				},
				{
					"name": "Review type",
					"item": [
						{
							"name": "form structure Copy",
							"id": "e5c55e3e-efd9-4fbe-bd13-1cb3e9f513cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/review_types"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Review_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Review_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "cb6eddb1-4c06-4077-99d2-bfb4fe57b49a"
									}
								}
							],
							"id": "30170123-e7c6-4e67-9393-b3a5750736c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/review_types"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Review_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Review_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Review_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "16f194fa-b638-43a3-b4e0-f34e93af4780"
									}
								}
							],
							"id": "11ff20ea-74c8-4c08-a008-f69711224d95",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 196,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Review_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "e9321a2e-ef34-47c4-b180-e08945e08411"
									}
								}
							],
							"id": "7443199d-f27e-4237-bd30-bdec5f1866b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Review_Type_ID}},\r\n            \"name\": \"{{Review_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=206",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "206"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "ecfb713a-711d-4734-a6c4-822c857ba294"
				},
				{
					"name": "Injury & lost day Type",
					"item": [
						{
							"name": "form structure",
							"id": "dab5e7e3-8674-46df-9cec-d14d85103c52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/leave_categories"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Injury&Lost_Category_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Injury&Lost_Category_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "a4be01e5-600f-4d86-8c15-e2f353a333cb"
									}
								}
							],
							"id": "7e266217-9e0a-469d-8783-3634c63a5b7c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/leave_categories"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Injury_Category_Type\", uniqueName);\r",
											"pm.globals.set(\"Injury_Category_Type\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Injury_Category_Type\", uniqueName);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "26cfba9c-c2ff-461f-ab1a-c280a01b17af"
									}
								}
							],
							"id": "a3aef7c9-9fea-4ba3-9251-cda8096545ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 222,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Injury_Category_Type}}\",\r\n            \"default_nb_lost_days\": 2\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "88fca2ba-50a4-487e-b7b7-02217a9ac637"
									}
								}
							],
							"id": "3fa513ec-2cf3-41dd-9423-6043c42dbc4b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Injury&Lost_Category_ID}},\r\n            \"name\": \"{{Injury_Category_Type}}+update\",\r\n            \"default_nb_lost_days\": 2\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=222",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "222"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "a7a60b59-6115-4a31-a8f1-2a27033f4909"
				},
				{
					"name": "Injury & lost day subtype",
					"item": [
						{
							"name": "form structure",
							"id": "a7b86b14-65bd-41d6-ba3f-370843b44007",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/leave_types"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Injury&Lost_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Injury&Lost_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "7198a2e6-6cdf-41b0-8d20-9e1a613250ae"
									}
								}
							],
							"id": "99ab7106-a040-4c48-a4cc-7d83a161ba9a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/leave_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Injury&leave_Sub_Type_name\", uniqueName);\r",
											"pm.globals.set(\"Injury&leave_Sub_Type_name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Injury&leave_Sub_Type_name\", uniqueName);\r",
											"\r",
											"\r",
											"// Define the pre-request script\r",
											"pm.variables.set('default_nb_lost_days', Math.floor(Math.random() * 500) + 1);\r",
											"\r",
											"// Define an array of valid leave category IDs\r",
											"const validLeaveCategoryIds = [1, 2, 5, 6, 7, 8, 9, 10];\r",
											"\r",
											"// Generate a random index to select a leave category ID from the array\r",
											"const randomIndex = Math.floor(Math.random() * validLeaveCategoryIds.length);\r",
											"\r",
											"// Get the random leave category ID\r",
											"const randomLeaveCategoryId = validLeaveCategoryIds[randomIndex];\r",
											"\r",
											"// Set the random leave category ID in the request parameter\r",
											"pm.variables.set('leave_category_id', randomLeaveCategoryId);\r",
											""
										],
										"type": "text/javascript",
										"id": "ffce2817-a303-4bbb-a3a2-3e092713c886"
									}
								}
							],
							"id": "8840a91b-6282-4b6a-8dd8-78c9e253fe94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 176,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Injury&leave_Sub_Type_name}}\",\r\n            \"leave_category_id\": {{Injury&Lost_Category_ID}},\r\n            \"default_nb_lost_days\": {{default_nb_lost_days}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"// Generate a random alphanumeric name\r",
											"function generateRandomName(length) {\r",
											"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"    result += characters.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"// Set the random name in the request parameter\r",
											"pm.variables.set('name', generateRandomName(10));\r",
											"\r",
											"\r",
											"// Define the pre-request script\r",
											"pm.variables.set('default_nb_lost_days', Math.floor(Math.random() * 500) + 1);\r",
											"\r",
											"// Define an array of valid leave category IDs\r",
											"const validLeaveCategoryIds = [1, 2, 5, 6, 7, 8, 9, 10];\r",
											"\r",
											"// Generate a random index to select a leave category ID from the array\r",
											"const randomIndex = Math.floor(Math.random() * validLeaveCategoryIds.length);\r",
											"\r",
											"// Get the random leave category ID\r",
											"const randomLeaveCategoryId = validLeaveCategoryIds[randomIndex];\r",
											"\r",
											"// Set the random leave category ID in the request parameter\r",
											"pm.variables.set('leave_category_id', randomLeaveCategoryId);\r",
											""
										],
										"type": "text/javascript",
										"id": "87f4fbe7-9334-453f-b535-548b3d80b770"
									}
								}
							],
							"id": "4a1664d3-9516-4f48-9730-e62d4806e725",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Injury&Lost_ID}},\r\n            \"name\": \"{{Injury&leave_Sub_Type_name}}+unique\",\r\n            \"leave_category_id\": {{Injury&Lost_Category_ID}},\r\n            \"default_nb_lost_days\": {{default_nb_lost_days}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=176",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "176"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "fc931ead-feb9-4c8a-88f1-fc2c55a75849"
				},
				{
					"name": "Contract End Reason",
					"item": [
						{
							"name": "form structure",
							"id": "2c19e922-d211-4160-aa04-1835bacd0e69",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/contract_end_reasons"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Contract_End_Reasons_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Contract_End_Reasons_ID\", data.data[0]['id']); \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "7156bd94-e12b-4777-a564-9f48f4157eeb"
									}
								}
							],
							"id": "0690641d-3fec-4f8e-8d27-3091c6d11f58",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/contract_end_reasons"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Contract_End_Name\", uniqueName);\r",
											"pm.globals.set(\"Contract_End_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Contract_End_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "1de14f60-e627-4da8-92d0-884e8d452bae"
									}
								}
							],
							"id": "e7c9d241-3c4f-427b-91eb-51afa2513a07",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 207,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Contract_End_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Contract_End_Name\", uniqueName);\r",
											"pm.globals.set(\"Contract_End_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Contract_End_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "238487ec-2af8-4d5e-b078-6fc638ace1e1"
									}
								}
							],
							"id": "e4394079-4fd5-42f4-aa3f-d095769a3a55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Contract_End_Reasons_ID}},\r\n            \"name\": \"{{Contract_End_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=207",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "207"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0d7dfa71-5e04-48e9-9dba-af4438a08067"
				},
				{
					"name": "Committee Type",
					"item": [
						{
							"name": "form structure",
							"id": "75aaca5b-5d43-4616-a06a-ddaad38954b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/committee_categories"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Committee_Categories_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Committee_Categories_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "825ba576-a2cf-4a78-a8ae-ab20821bb357"
									}
								}
							],
							"id": "00f3d969-d63f-4cc8-9832-2767bd57c4d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/committee_categories"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Commitee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Commitee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Commitee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "e163b9c0-fa2d-45d7-b413-8651d927c9fe"
									}
								}
							],
							"id": "a9f3126f-e0d4-4e75-9ba7-4a648cfb4c9e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 210,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Commitee_Type_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "671c87be-a43c-4d1f-b295-1fc257a87f06"
									}
								}
							],
							"id": "67fc79b0-4576-4f3f-b200-82343e529098",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Committee_Categories_ID}},\r\n            \"name\": \"{{Commitee_Type_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=210",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "210"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "dd62ddcd-11d6-4d58-963f-c5c234820aee"
				},
				{
					"name": "Committee Subtype",
					"item": [
						{
							"name": "form structure",
							"id": "b0216293-a0a2-4d39-9dc1-e368b94d6284",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/committee_types"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Committee_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Committee_Type_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "bbaf7204-aa3c-4c41-b7f0-2156dc1a7198"
									}
								}
							],
							"id": "8baa5f5f-7666-406c-986b-066d6403ba4f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/committee_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Commitee_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Commitee_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Commitee_Type_Name\", uniqueName);"
										],
										"type": "text/javascript",
										"id": "d8ca396f-6fe3-4b1d-9bee-473c329b64d8"
									}
								}
							],
							"id": "560cf9e5-2f0b-4e14-8416-d18c17362991",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 198,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Commitee_Type_Name}}\",\r\n            \"committee_category_id\":{{Committee_Categories_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "40bfcbd5-177a-4e53-b9e7-ed34fa41f05b"
									}
								}
							],
							"id": "1068befa-f5e6-45d2-b041-f18d293440f3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Committee_Type_ID}},\r\n            \"name\": \"{{Commitee_Type_Name}}+update\",\r\n            \"committee_category_id\":{{Committee_Categories_ID}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=198",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "198"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0e174be4-2761-44ca-91e8-afd498117949"
				},
				{
					"name": "Ocean Distance",
					"item": [
						{
							"name": "Form Structure",
							"id": "2bc7d989-a271-4c7a-b667-162db8ecb219",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/port_distances"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Ocean_Distance_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Ocean_Distance_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "3fd6f967-109a-48f8-aab7-2245c71b8a8a"
									}
								}
							],
							"id": "85881c2c-c4d4-467d-8fa4-3b4b125acafb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/port_distances"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);"
										],
										"type": "text/javascript",
										"id": "211e669a-6625-4053-b971-96925312519a"
									}
								}
							],
							"id": "afde1373-2b6b-4798-ac5e-219fad96a7a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 233,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"origin\": \"ASD\",\r\n            \"destination\": \"ERLHL\",\r\n            \"distance\": {{distance}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=77&subscriber_id=1&id=233",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "77"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "id",
											"value": "233"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);"
										],
										"type": "text/javascript",
										"id": "f13bfdcd-1957-4005-a23d-fa86220bfedc"
									}
								}
							],
							"id": "5ff37e1a-da99-4dc7-923b-5c961cdd4c11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Ocean_Distance_ID}},\r\n            \"origin\": \"ASD\",\r\n            \"destination\": \"ERLHL\",\r\n            \"distance\": {{distance}}\r\n\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=233",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "233"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b0790374-3250-4482-8355-f8264442a620"
				},
				{
					"name": "Airports",
					"item": [
						{
							"name": "form structure",
							"id": "2f61b6cf-fe7a-4997-9dd6-f0ea1f971ada",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/airports"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Airport_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Airport_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "25551046-b8e7-4993-a785-4409babf7248"
									}
								}
							],
							"id": "0f0738f0-7f7d-49fd-aa8e-c43c8424cd15",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/airports"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Airport_Name\", uniqueName);\r",
											"pm.globals.set(\"Airport_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Airport_Name\", uniqueName);\r",
											"\r",
											"\r",
											"\r",
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "8ba9ea6e-06dd-4f9f-a1f9-eeca3fa13e7e"
									}
								}
							],
							"id": "a1c34a4c-a932-4e5a-ab89-1d3eec1a663e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 191,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Airport_Name}}\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"city\": \"test\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											""
										],
										"type": "text/javascript",
										"id": "a07090a9-bd50-4e3a-a588-dd05fd714562"
									}
								}
							],
							"id": "307c7e3d-c9db-438b-89f0-524eb8f1182d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Airport_ID}},\r\n            \"name\": \"{{Airport_Name}}+update\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"city\": \"test\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=191",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "191"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b8df2968-dc54-4ba7-b322-05db1a36572e"
				},
				{
					"name": "Airline carrier",
					"item": [
						{
							"name": "form structure",
							"id": "f5de6461-a866-4443-aa98-014a86989563",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/airlines"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Airline_Carrier_id\", data.data[0]['id']); \r",
											"pm.globals.set(\"Airline_Carrier_id\", data.data[0]['id']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "854b2dec-5be4-407f-b9c6-436f629bf2f3"
									}
								}
							],
							"id": "209c4eaa-124c-4241-9632-a803dde7b22e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/airlines"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Airline_Carrier_Name\", uniqueName);\r",
											"pm.globals.set(\"Airline_Carrier_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Airline_Carrier_Name\", uniqueName);\r",
											"\r",
											"\r",
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											""
										],
										"type": "text/javascript",
										"id": "cc9f5af7-aad5-44bc-855b-ceee3a2aca26"
									}
								}
							],
							"id": "39153380-6fdb-41f3-8716-f624c0f0e589",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 190,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Airline_Carrier_Name}}\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet code\r",
											"function generateRandomAlphabetCode(length) {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random 5-character alphabet code\r",
											"const randomCode = generateRandomAlphabetCode(5);\r",
											"\r",
											"// Store the random code in an environment variable called 'random_alphabet_code'\r",
											"pm.environment.set('iata', randomCode);\r",
											""
										],
										"type": "text/javascript",
										"id": "1303afbf-c37a-43e1-9c9b-fad1576d7906"
									}
								}
							],
							"id": "17e7614f-1e13-4aaa-859a-6ce66bb1caca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Airline_Carrier_id}},\r\n            \"name\": \"{{Airline_Carrier_Name}}+update\",\r\n            \"iata\": \"{{iata}}\",\r\n            \"country_id\": 1\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=190",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "190"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "62e23442-fb54-447b-bc37-b48e1a32c682"
				},
				{
					"name": "Airport Distances",
					"item": [
						{
							"name": "Form Structure",
							"id": "cbb2d849-56c7-4cd8-8a78-d1725303ec34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/airport_distances"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Airport_Distance_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Airport_Distance_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "1fa75ce0-87b9-432e-9280-305b4dca7365"
									}
								}
							],
							"id": "23422c0b-a57e-453d-9200-f1b0c3e58c64",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/airport_distances"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "b6403d54-19fe-4c46-b0ec-7d7b474dbf35"
									}
								}
							],
							"id": "d9137a1c-dfd0-48da-b0e8-36b35c3a9171",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 234,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        \r\n        {\r\n            \"origin\": \"HRG\",\r\n            \"destination\": \"JVAGS\",\r\n            \"distance\": {{distance}}\r\n        }\r\n        \r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=77&subscriber_id=1&id=234",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "77"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "id",
											"value": "234"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomDistance = Math.random() * 1000; \r",
											"pm.globals.set(\"distance\", randomDistance);"
										],
										"type": "text/javascript",
										"id": "4c464b39-e2b2-4065-af69-92c828ef3eb5"
									}
								}
							],
							"id": "70bea38b-2142-41fd-9905-4979510bc5e6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Airport_Distance_ID}},\r\n            \"origin\": \"HRG\",\r\n            \"destination\": \"JVAGS\",\r\n            \"distance\": {{distance}}\r\n\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=234",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "234"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "9883a578-eecd-455c-8832-4bf35bd6501f"
				},
				{
					"name": "Trip type",
					"item": [
						{
							"name": "form structure",
							"id": "3cbcb6bb-52d4-4458-ab64-40447fb29713",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/trip_types"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Trip_Types_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Trip_Types_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e9cc6cbb-4a44-42ef-af5c-c48926d63b40"
									}
								}
							],
							"id": "f808477c-482d-479f-b5d0-7dc5bf5cbc04",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/trip_types"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Trip_Type_Name\", uniqueName);\r",
											"pm.globals.set(\"Trip_Type_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Trip_Type_Name\", uniqueName);\r",
											"\r",
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));\r",
											""
										],
										"type": "text/javascript",
										"id": "3750e9fb-db48-48e2-9912-055d47a19dae"
									}
								}
							],
							"id": "8028b8cb-b027-4292-95cb-d6fc2cdeed66",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 216,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Trip_Type_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));"
										],
										"type": "text/javascript",
										"id": "63c10e18-c74c-40c7-87de-2cf6c0d57058"
									}
								}
							],
							"id": "90d27516-a3e6-4d57-8592-134710386a27",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Trip_Types_ID}},\r\n            \"name\": \"{{Trip_Type_Name}}+update\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=216",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "216"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cc953f9a-9e0e-4eef-8eca-fa6262c8f7d8"
				},
				{
					"name": "Product Category (for logistics)",
					"item": [
						{
							"name": "form structure",
							"id": "a50c9566-cfdc-47bd-843f-b1d5def54756",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/product_categories"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Product_Category_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Product_Category_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d2d4281f-96ce-44cf-b5dc-d4ded94ace21"
									}
								}
							],
							"id": "59ea2853-953e-450a-9f14-9e848c8ec86c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/product_categories"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Product_Category_Name\", uniqueName);\r",
											"pm.globals.set(\"Product_Category_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Product_Category_Name\", uniqueName);\r",
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));\r",
											""
										],
										"type": "text/javascript",
										"id": "7ab22aaa-771e-44e8-8a7f-ab688c8c7699"
									}
								}
							],
							"id": "0d77c620-73c5-4174-9294-e15ac47c94c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 192,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Product_Category_Name}}\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// Generate a random number between min and max (inclusive)\r",
											"function generateRandomNumber(min, max) {\r",
											"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"// Set the random number in the request parameter\r",
											"pm.variables.set(\"sort_order\", generateRandomNumber(1, 1000));"
										],
										"type": "text/javascript",
										"id": "f2c01e04-9240-443f-8ed0-fab13e040bf6"
									}
								}
							],
							"id": "92bb9564-bcfd-4718-84b6-ee0347d3685b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Product_Category_ID}},\r\n            \"name\": \"{{Product_Category_Name}}+update\",\r\n            \"sort_order\": {{sort_order}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=192",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "192"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "8585b804-a2bd-4a1a-9919-fbc0e78e0b1e"
				},
				{
					"name": "List of values",
					"item": [
						{
							"name": "Form Structure",
							"id": "c62977c5-e4c9-40ff-9f1a-c571a5aca0f8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/list_of_values"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"GHaul_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"GHaul_Type_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "04fba576-3edd-497f-b6d2-2279635bb462"
									}
								}
							],
							"id": "4f0b8fa0-6bbf-4d71-bd99-25dd91671470",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/list_of_values"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Haul_Name\", uniqueName);\r",
											"pm.globals.set(\"Haul_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Haul_Name\", uniqueName);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "526177be-4979-41d8-b6ba-15a10b57dced"
									}
								}
							],
							"id": "345784ff-d50c-45dc-a856-cb3b8af606f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 199,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Haul_Name}}\",\r\n            \"type\": \"HaulType\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=199",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "199"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "df9fcd2d-11e1-4507-99a5-9f8d7f5eff30"
									}
								}
							],
							"id": "de40723b-3f40-4b7b-9e69-650d495f82d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Haul_Type_ID}},\r\n            \"name\": \"{{Haul_Name}}+update\",\r\n            \"type\": \"HaulType\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=199",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "199"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cec8509c-9824-4ae4-a947-9b9f7220381f"
				},
				{
					"name": "Labels configuration",
					"item": [
						{
							"name": "form structure",
							"id": "b358bda5-769f-41b7-892e-5493c540f7dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/document_labels"
							},
							"response": []
						},
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Document_Label_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Document_Label_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "2ecea99a-2c69-4bbf-9e98-42c101b4f580"
									}
								}
							],
							"id": "ffa98569-482f-4db0-98d2-69d5947c1a2f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/document_labels"
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate a random alphanumeric name\r",
											"function generateRandomName(length) {\r",
											"  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"  let result = '';\r",
											"\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
											"    result += characters.charAt(randomIndex);\r",
											"  }\r",
											"\r",
											"  return result;\r",
											"}\r",
											"\r",
											"// Set the random name in the request parameter\r",
											"pm.variables.set('Label_Name', generateRandomName(10));\r",
											"pm.globals.set('Label_Name', generateRandomName(10));\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "ec59d7f3-cf29-46e1-a398-b3e89c2dddc7"
									}
								}
							],
							"id": "aba006f9-db9c-4307-b15b-9f0127658926",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 214,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Label_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "88a4e701-4d60-426c-a632-bc55684bb686"
									}
								}
							],
							"id": "ebd485ac-8859-4dd7-82ba-b23329f834c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Document_Label_ID}},\r\n            \"name\": \"{{Label_Name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=214",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "214"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "edd72dd9-2d3f-4e70-a513-2e5790528cff"
				},
				{
					"name": "Water providers",
					"item": [
						{
							"name": "form structure",
							"id": "973d0798-169f-47ac-889a-ffeede9db902",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/water_providers"
							},
							"response": []
						},
						{
							"name": "List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Water_Providers_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Water_Providers_ID\", data.data[0]['id']);\r",
											"\r",
											" \r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4c1e8409-e367-4099-b4c0-e5b438bf45a9"
									}
								}
							],
							"id": "f7d2ec54-85c3-48c6-babd-cdd03403a204",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/water_providers"
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"\r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											" }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"\r",
											"const locationName = generateUniqueLocationName();\r",
											"\r",
											"pm.environment.set(\"Water_Provider_name\",locationName);\r",
											"\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"// Generate a random positive number\r",
											"const randomNumber = Math.floor(Math.random() * 1000) + 1;\r",
											"\r",
											"// Set the random number as a request variable\r",
											"pm.variables.set('sort_order', randomNumber);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "24a9b989-b254-489d-bef5-86143b89a7ef"
									}
								}
							],
							"id": "8c69c74a-2599-4720-a841-daab11c995e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 89,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Water_Provider_name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update",
							"id": "62962a09-d752-42fb-ab19-ac2341663f5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n             \"id\": {{Water_Providers_ID}},\r\n            \"name\": \"{{Water_Provider_name}}+update\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?form_id=89&subscriber_id=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "form_id",
											"value": "89"
										},
										{
											"key": "subscriber_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "cf6b0a5c-6fac-4b7d-80f2-0b933b6a1883"
				},
				{
					"name": "Water Pollutant",
					"item": [
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Water_pollutants_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Water_pollutants_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "06c5742b-acfb-47c7-bfcd-f75284a59b1e"
									}
								}
							],
							"id": "0a018d52-2479-4d82-ae71-941691713524",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/water_pollutants"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"water_pollutant_name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"         \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "44bec9d6-7de5-488f-9e1d-5d8639edfc66"
									}
								}
							],
							"id": "ac6bec27-9c94-4c54-9036-0e3cdf9699ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 88,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{water_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"type\": \"WaterPollutant\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript",
										"id": "fb8c1242-10e1-4793-874f-37414c73b1b7"
									}
								}
							],
							"id": "1a5152aa-85a7-419e-91ac-e2c75b44dc5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":\"{{Water_pollutants_ID}}\",\r\n            \"name\": \"{{water_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"type\": \"WaterPollutant\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=88",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "88"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e5bc9b74-083f-4bfb-afe3-f55e11305a55"
				},
				{
					"name": "Air Pollutant",
					"item": [
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Air_pollutants_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Air_pollutants_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "5ee89757-67bb-4791-8f7e-cae414daf814"
									}
								}
							],
							"id": "1eb00737-4e3b-4cb0-b381-be6c9d27dcaf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/air_pollutants"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"Air_pollutant_name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"         \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "885c7d9e-ccad-4a79-b9d4-46fe247d851f"
									}
								}
							],
							"id": "0b345c22-67c5-4bb9-80e7-99a4b879525f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 88,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Air_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript",
										"id": "844c6391-71df-4cf5-9419-153fabf0e760"
									}
								}
							],
							"id": "e3896299-4888-450d-88ee-18eae8d620b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":{{Air_pollutants_ID}},\r\n            \"name\": \"{{Air_pollutant_name}}\",\r\n            \"metric_type\": \"{{validation_option}}\",\r\n            \"remarks\": \"{{remarks}}\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=88",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "88"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5d0562db-7183-43dc-b0c1-1f6374a29a15"
				},
				{
					"name": "Tag Master",
					"item": [
						{
							"name": "form structure",
							"id": "48df1a34-743a-4047-8cc0-d6483f6a82c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/tag_master"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Tag_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Tag_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "030b1268-946e-4199-93e3-20919b073c9b"
									}
								}
							],
							"id": "841f1a1c-0901-4f71-906b-ef9b26514f90",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/tag_master"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Tag_Name\", uniqueName);\r",
											"pm.globals.set(\"Tag_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Tag_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "27bba08c-9a9f-4090-bb47-b548d7cc5cdc"
									}
								}
							],
							"id": "509511d6-ab00-42e5-9409-2952edf82471",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 262,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Tag_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript",
										"id": "1e4fd76b-3f95-417e-ba53-8c1b724487a0"
									}
								}
							],
							"id": "43723166-d4fd-45ee-953e-4438724c0b0a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":{{Tag_ID}},\r\n            \"name\": \"{{Tag_Name}}+update\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=262",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "262"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "aa08e462-f05b-4abe-a09f-010c27be252b"
				},
				{
					"name": "Tracking Types",
					"item": [
						{
							"name": "form structure",
							"id": "4b42d4ea-a26d-44fa-8246-06a8993d4c44",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/tracking_types"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Vehicle_Tracking_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Vehicle_Tracking_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "d108e29b-8e6c-4256-a0ce-f5c37b9e36d7"
									}
								}
							],
							"id": "e9e7d2c9-bd88-4f0f-ad09-f1d1158d0799",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/tracking_types"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random alphabet name\r",
											"\r",
											"function generateRandomName() {\r",
											"\r",
											"  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"\r",
											"  let name = '';\r",
											"\r",
											"  for (let i = 0; i < 6; i++) {\r",
											"\r",
											"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
											"\r",
											"    name += alphabet[randomIndex];\r",
											"\r",
											"  }\r",
											"\r",
											"  return name;\r",
											"\r",
											"}\r",
											"\r",
											"// Generate a unique name\r",
											"const uniqueName = generateRandomName();\r",
											"\r",
											"// Store the unique name in a Postman variable\r",
											"pm.variables.set(\"Vehicle_Tracking_Name\", uniqueName);\r",
											"pm.globals.set(\"Vehicle_Tracking_Name\", uniqueName);\r",
											"postman.setEnvironmentVariable(\"Vehicle_Tracking_Name\", uniqueName);\r",
											""
										],
										"type": "text/javascript",
										"id": "b636b1ef-6725-4b8c-aa0a-ccc2a7f7f9ca"
									}
								}
							],
							"id": "e479a534-c291-45c6-b032-66443f255dc8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 113,\r\n    \"subscriber_id\": 1,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{Vehicle_Tracking_Name}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);       \r",
											"\r",
											"\r",
											"// Set up a set to store generated remarks\r",
											"const generatedRemarks = new Set();      \r",
											"            \r",
											"// Function to generate a random remark\r",
											"function generateRemark() {\r",
											"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;':\\<>.?/\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 50; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const remark = `Remark: ${randomString}`;\r",
											"    return remark;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique remark\r",
											"function generateUniqueRemark() {\r",
											"    let remark = generateRemark();\r",
											"    while (generatedRemarks.has(remark)) {\r",
											"        remark = generateRemark();\r",
											"    }\r",
											"    generatedRemarks.add(remark);\r",
											"    return remark;\r",
											"}\r",
											"\r",
											"const remark = generateUniqueRemark();\r",
											"pm.environment.set(\"remarks\", remark);\r",
											"console.log(remark);\r",
											"         \r",
											"\r",
											"//concentration\r",
											"// Define an array of validation options\r",
											"const options = ['Concentration','ph','Temperature','Darkness'];\r",
											"\r",
											"// Generate a random index to select a validation option\r",
											"const randomIndex = Math.floor(Math.random() * options.length);\r",
											"\r",
											"// Select a validation option based on the random index\r",
											"const validationOption = options[randomIndex];\r",
											"\r",
											"// Save the selected option as a Postman environment variable\r",
											"pm.environment.set('validation_option', validationOption);\r",
											"\r",
											"// Generate a random decimal value between 0 and 1\r",
											"const randomValue = Math.random();\r",
											"\r",
											"\r",
											"         \r",
											""
										],
										"type": "text/javascript",
										"id": "4e992c7d-4d38-4e4a-aa60-26fa226ec848"
									}
								}
							],
							"id": "b56ce0a0-9651-4750-9b6a-e7325005b968",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"data\": [\r\n        {\r\n            \"id\":{{Vehicle_Tracking_Type_ID}},\r\n            \"name\": \"{{Vehicle_Tracking_Name}}+update\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=113",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "113"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "dfd46cdc-1acf-4ead-961c-018a0ed85500"
				},
				{
					"name": "Transportation modes",
					"item": [
						{
							"name": "form structure",
							"id": "7ebbf380-5658-4d43-acec-65106643a4ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/transportation_modes"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Transaportation_Mode_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Transaportation_Mode_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "dc008cb0-f859-4cee-acbb-40d0c259faeb"
									}
								}
							],
							"id": "8132fc27-14f6-4e23-ae53-b0c3993a8525",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/transportation_modes"
							},
							"response": []
						}
					],
					"id": "c011abd0-c593-4c5b-a48a-31355c30b803"
				},
				{
					"name": "Commute Fuel emission factor",
					"item": [
						{
							"name": "form structure",
							"id": "b1019c6d-908a-4d82-b5c9-0f5ea745322c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/commute_with_fuel_type_emission_factor"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Commute_Fuel_Type_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Commute_Fuel_Type_ID\", data.data[0]['id']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "95586bd0-2d6b-40da-ab64-c75c8c2845e4"
									}
								}
							],
							"id": "f7b5057d-9cb9-40a5-a340-a4b860c38c86",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/commute_with_fuel_type_emission_factor"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const yearOptions = [2020, 2021, 2022, 2023, 2024, 2025, 2026];\r",
											"const yearRandomIndex = Math.floor(Math.random() * yearOptions.length);\r",
											"const yearRandomValue = yearOptions[yearRandomIndex];\r",
											"pm.globals.set(\"year\", yearRandomValue);\r",
											"\r",
											"\r",
											"// Define a function to generate a random decimal number within a specified range\r",
											"function getRandomDecimal(min, max, decimalPlaces) {\r",
											"  const rand = Math.random() * (max - min) + min;\r",
											"  return rand.toFixed(decimalPlaces);\r",
											"}\r",
											"\r",
											"// Set the desired range and decimal places for the random number (change values as needed)\r",
											"const minNumber = 0.1;\r",
											"const maxNumber = 20.0;\r",
											"const decimalPlaces = 2; // Adjust this value to set the number of decimal places\r",
											"\r",
											"// Generate the random decimal number and store it in an environment variable\r",
											"pm.environment.set(\"randomDecimal\", getRandomDecimal(minNumber, maxNumber, decimalPlaces));\r",
											"\r",
											"\r",
											"// Define possible values for emission_unit_id\r",
											"const emissionPossibleValues = [6, 7, 8, 9, 10, 11, 58, 65, 69];\r",
											"const randomEmissionIndex = Math.floor(Math.random() * emissionPossibleValues.length);\r",
											"const emission_unit_id = emissionPossibleValues[randomEmissionIndex];\r",
											"pm.globals.set(\"emission_unit_id\", emission_unit_id.toString());\r",
											"\r",
											"// Define possible values for consumption\r",
											"const consumptionPossibleValues = [22, 23, 34];\r",
											"const randomconsumptionIndex = Math.floor(Math.random() * consumptionPossibleValues.length);\r",
											"const consumption_unit_id = consumptionPossibleValues[randomconsumptionIndex];\r",
											"pm.globals.set(\"consumption_unit_id\", emission_unit_id.toString());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "c80b3532-3599-424e-8009-f1fcef82021f"
									}
								}
							],
							"id": "08ef9a0e-779d-46e0-9972-3e85b1ba7836",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 263,\r\n    \"subscriber_id\": \"1\",\r\n    \"data\": [\r\n        {\r\n            \"year\": \"{{year}}\",\r\n            \"transportation_mode_id\": {{Transaportation_Mode_ID}},\r\n            \"source\": null,\r\n            \"web\": null,\r\n            \"emission_unit_id\": 8,\r\n            \"consumption_unit_id\": 22,\r\n            \"fuel_type_id\": 16,\r\n            \"remarks\": null,\r\n            \"co2e\": {{randomDecimal}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const yearOptions = [2020, 2021, 2022, 2023, 2024, 2025, 2026];\r",
											"const yearRandomIndex = Math.floor(Math.random() * yearOptions.length);\r",
											"const yearRandomValue = yearOptions[yearRandomIndex];\r",
											"pm.globals.set(\"year\", yearRandomValue);\r",
											"\r",
											"\r",
											"// Define a function to generate a random decimal number within a specified range\r",
											"function getRandomDecimal(min, max, decimalPlaces) {\r",
											"  const rand = Math.random() * (max - min) + min;\r",
											"  return rand.toFixed(decimalPlaces);\r",
											"}\r",
											"\r",
											"// Set the desired range and decimal places for the random number (change values as needed)\r",
											"const minNumber = 0.1;\r",
											"const maxNumber = 20.0;\r",
											"const decimalPlaces = 2; // Adjust this value to set the number of decimal places\r",
											"\r",
											"// Generate the random decimal number and store it in an environment variable\r",
											"pm.environment.set(\"randomDecimal\", getRandomDecimal(minNumber, maxNumber, decimalPlaces));\r",
											"\r",
											"\r",
											"// Define possible values for emission_unit_id\r",
											"const emissionPossibleValues = [6, 7, 8, 9, 10, 11, 58, 65, 69];\r",
											"const randomEmissionIndex = Math.floor(Math.random() * emissionPossibleValues.length);\r",
											"const emission_unit_id = emissionPossibleValues[randomEmissionIndex];\r",
											"pm.globals.set(\"emission_unit_id\", emission_unit_id.toString());\r",
											"\r",
											"// Define possible values for consumption\r",
											"const consumptionPossibleValues = [22, 23, 34];\r",
											"const randomconsumptionIndex = Math.floor(Math.random() * consumptionPossibleValues.length);\r",
											"const consumption_unit_id = consumptionPossibleValues[randomconsumptionIndex];\r",
											"pm.globals.set(\"consumption_unit_id\", emission_unit_id.toString());\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"id": "ed59f7a9-62b3-4465-bd65-f278537ca16d"
									}
								}
							],
							"id": "7c1c2304-2629-4913-b59a-98930f3726d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Commute_Fuel_Type_ID}},\r\n            \"year\": \"{{year}}\",\r\n            \"transportation_mode_id\": {{Transaportation_Mode_ID}},\r\n            \"source\": null,\r\n            \"web\": null,\r\n            \"emission_unit_id\": 7,\r\n            \"consumption_unit_id\": 22,\r\n            \"fuel_type_id\": 16,\r\n            \"remarks\": null,\r\n            \"co2e\": {{randomDecimal}}\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=1&form_id=263",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "1"
										},
										{
											"key": "form_id",
											"value": "263"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c2f8625e-cf25-42e8-b318-c598b5677394"
				},
				{
					"name": "Language translation",
					"item": [
						{
							"name": "New Request",
							"id": "cbcb3498-9610-4059-9795-6602a78b499d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/language_translation/language?page=2&per_page=10",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "52cd0a38-48a5-4e7c-87ee-12a637132139",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/language_translation/language"
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "cec33dde-9b45-4840-ae59-28f3ba33a834",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/language_translation/language?filter=not found",
									"host": [
										"{{url}}"
									],
									"path": [
										"language_translation",
										"language"
									],
									"query": [
										{
											"key": "filter",
											"value": "not found"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "eb1b782d-e433-450f-86ab-d130de794533",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/language_translation/language_json/ES"
							},
							"response": []
						},
						{
							"name": "New Request",
							"id": "7e2a5a1f-8b0e-4fa6-81e1-97ac189208f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"lang_id\": 3,\r\n            \"module_name\": \"Admin\",\r\n            \"key\": \"PARIMERY_KEY_COLUMN_NOT_EXISTS\",\r\n            \"en\": \"Parent Key column not updated in fields table\",\r\n            \"zh-TW\": \"\",\r\n            \"zh-CN\": \"\",\r\n            \"es\": \"\",\r\n            \"pt\": \"\",\r\n            \"ja\": \"エラーが発生しました\",\r\n            \"ko\": \"\",\r\n            \"id\": \"\",\r\n            \"ms\": \"\",\r\n            \"vi\": \"\",\r\n            \"th\": \"\",\r\n            \"km\": \"\"\r\n        },\r\n        {\r\n            \"lang_id\": 9,\r\n            \"module_name\": \"Admin\",\r\n            \"key\": \"AN_ERROR_OCCURED\",\r\n            \"en\": \"An Error Occured\",\r\n            \"zh-TW\": \"\",\r\n            \"zh-CN\": \"发生错误\",\r\n            \"es\": \"\",\r\n            \"pt\": \"\",\r\n            \"ja\": \"エラーが発生しました\",\r\n            \"ko\": \"\",\r\n            \"id\": \"TERJADI KESALAHAN\",\r\n            \"ms\": \"\",\r\n            \"vi\": \"XẢY RA LỖI\",\r\n            \"th\": \"เกิดข้อผิดพลาด\",\r\n            \"km\": \"\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/language_translation/language/bulk-update"
							},
							"response": []
						}
					],
					"id": "be7dd851-c400-40ac-88e2-78848fe9a0d7"
				},
				{
					"name": "Email template",
					"item": [
						{
							"name": "Form Structure",
							"id": "5c3612d0-7fcd-4a3a-abee-690d2de14e37",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/form-structure/fields/email_template"
							},
							"response": []
						},
						{
							"name": "List Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"Email_templates_ID\", data.data[0]['id']); \r",
											"pm.globals.set(\"Email_templates_ID\", data.data[0]['id']);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e3ad6506-c3bb-44c2-a3ab-7fca0569b671"
									}
								}
							],
							"id": "34d3aa7d-c0c7-4799-b843-c39743f72fdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{url}}/list/email_template"
							},
							"response": []
						},
						{
							"name": "Create Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//name\r",
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"//title\r",
											"// Set up a set to store generated titles\r",
											"const generatedTitles = new Set();\r",
											"\r",
											"// Function to generate a random title\r",
											"function generateLocationTitle() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationTitle = `Location ${randomString}`;\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"// Function to generate a unique location title\r",
											"function generateUniqueLocationTitle() {\r",
											"    let locationTitle = generateLocationTitle();\r",
											"    while (generatedTitles.has(locationTitle)) {\r",
											"        locationTitle = generateLocationTitle();\r",
											"    }\r",
											"    generatedTitles.add(locationTitle);\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"const locationTitle = generateUniqueLocationTitle();\r",
											"pm.environment.set(\"title\", locationTitle);\r",
											"// pm.globals.get(\"title\", locationTitle);\r",
											"console.log(locationTitle);\r",
											"\r",
											"//content\r",
											"// Set up a set to store generated content\r",
											"const generatedContent = new Set();\r",
											"\r",
											"// Function to generate a random content\r",
											"function generateLocationContent() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationContent = `Location ${randomString}`;\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"// Function to generate unique location content\r",
											"function generateUniqueLocationContent() {\r",
											"    let locationContent = generateLocationContent();\r",
											"    while (generatedContent.has(locationContent)) {\r",
											"        locationContent = generateLocationContent();\r",
											"    }\r",
											"    generatedContent.add(locationContent);\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"const locationContent = generateUniqueLocationContent();\r",
											"pm.environment.set(\"content\", locationContent);\r",
											"// pm.globals.get(\"content\", locationContent);\r",
											"console.log(locationContent);\r",
											""
										],
										"type": "text/javascript",
										"id": "79f21b6e-f0b0-4a3b-97aa-f304dcc1ff47"
									}
								}
							],
							"id": "47fa7646-b3a9-4fdf-bdcb-172ea66d3eee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"form_id\": 261,\r\n    \"subscriber_id\": 2,\r\n    \"data\": [\r\n        {\r\n            \"name\": \"{{name}}\",\r\n            \"title\": \"{{title}}\",\r\n            \"content\": \"{{content}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{url}}/form_submit"
							},
							"response": []
						},
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//name\r",
											"// Set up a set to store generated names\r",
											"const generatedNames = new Set();      \r",
											"            \r",
											"  // Function to generate a random  name\r",
											"function generateLocationName() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationName = `Location ${randomString}`;\r",
											"    return locationName;\r",
											"}         \r",
											"\r",
											"// Function to generate a unique location name\r",
											"function generateUniqueLocationName() {\r",
											"    let locationName = generateLocationName();\r",
											"    while (generatedNames.has(locationName)) {\r",
											"        locationName = generateLocationName();\r",
											"    }\r",
											"    generatedNames.add(locationName);\r",
											"    return locationName;\r",
											"}\r",
											"const locationName = generateUniqueLocationName();\r",
											"pm.environment.set(\"name\",locationName);\r",
											"//pm.globals.get(\"name\",locationName);\r",
											"console.log(locationName);    \r",
											"\r",
											"//title\r",
											"// Set up a set to store generated titles\r",
											"const generatedTitles = new Set();\r",
											"\r",
											"// Function to generate a random title\r",
											"function generateLocationTitle() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationTitle = `Location ${randomString}`;\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"// Function to generate a unique location title\r",
											"function generateUniqueLocationTitle() {\r",
											"    let locationTitle = generateLocationTitle();\r",
											"    while (generatedTitles.has(locationTitle)) {\r",
											"        locationTitle = generateLocationTitle();\r",
											"    }\r",
											"    generatedTitles.add(locationTitle);\r",
											"    return locationTitle;\r",
											"}\r",
											"\r",
											"const locationTitle = generateUniqueLocationTitle();\r",
											"pm.environment.set(\"title\", locationTitle);\r",
											"// pm.globals.get(\"title\", locationTitle);\r",
											"console.log(locationTitle);\r",
											"\r",
											"//content\r",
											"// Set up a set to store generated content\r",
											"const generatedContent = new Set();\r",
											"\r",
											"// Function to generate a random content\r",
											"function generateLocationContent() {\r",
											"    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
											"    let randomString = \"\";\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const locationContent = `Location ${randomString}`;\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"// Function to generate unique location content\r",
											"function generateUniqueLocationContent() {\r",
											"    let locationContent = generateLocationContent();\r",
											"    while (generatedContent.has(locationContent)) {\r",
											"        locationContent = generateLocationContent();\r",
											"    }\r",
											"    generatedContent.add(locationContent);\r",
											"    return locationContent;\r",
											"}\r",
											"\r",
											"const locationContent = generateUniqueLocationContent();\r",
											"pm.environment.set(\"content\", locationContent);\r",
											"// pm.globals.get(\"content\", locationContent);\r",
											"console.log(locationContent);\r",
											""
										],
										"type": "text/javascript",
										"id": "2319129b-4217-4c65-8fa1-9b2f4dec4cfc"
									}
								}
							],
							"id": "b87ad540-2568-4054-81bd-bdfb71c85943",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": [\r\n        {\r\n            \"id\": {{Email_templates_ID}},\r\n            \"name\": \"{{name}}\",\r\n            \"title\": \"{{title}}\",\r\n            \"content\": \"{{content}}\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/form_submit?subscriber_id=2&form_id=261",
									"host": [
										"{{url}}"
									],
									"path": [
										"form_submit"
									],
									"query": [
										{
											"key": "subscriber_id",
											"value": "2"
										},
										{
											"key": "form_id",
											"value": "261"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "18ec410e-477d-4dea-8d48-85df68c350b7"
				}
			],
			"id": "60a25d21-43fd-4627-b447-49f87c9583e5",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{refresh_token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8e23ce5e-92c5-4aa3-b866-2f11b5e1076e"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "7d3b6b64-3179-4e90-8214-d49bd5a7463d"
					}
				}
			]
		},
		{
			"name": "PageBuilder",
			"item": [
				{
					"name": "Create New Page",
					"id": "879fdc2b-2f26-4948-aa71-c1c983a628de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InByZW1hbGF0aGFAYWdpbGVjeWJlci5jb20iLCJ1c2VyX2lkIjozMTMsInN1YnNjcmliZXJfaWQiOjEsImNyZWRlbnRpYWxzIjoiUk4yTUJ4S0xtNUhOYTdKTnpJd0o2TWI5ZGNEKzdtTlNKMjd5U1RvN2RrcXVLa2JpblUvNGI3M3VYRzdmSXh3d3c2OFgvUmJEZ0pya254SnJlMy9xUmtxRzBnZklxck5uMnN2Y0tIQWpjT1RYMS9ZZWVwRHZPYzVIL0UxQXZSSHlxdFFZWW9hU2VXelE5eUhvcXQwaDlRPT0iLCJleHAiOjE2ODg3MDM3NDh9.o0YDj0C9kg2Ii8rzVCe0CJ7C7lbPYxuz49etjIgEhrA"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"Page 1\",\r\n        \"title\": \"page\",\r\n        \"module_id\": 5,\r\n        \"content\": \"{\\\"key\\\": \\\"value\\\"}\"\r\n    },\r\n    {\r\n        \"name\": \"Page 2\",\r\n        \"title\": \"page\",\r\n        \"module_id\": 5,\r\n        \"content\": \"{\\\"key\\\": \\\"value\\\"}\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}pagebuilder/pages_submit"
					},
					"response": []
				},
				{
					"name": "List all pages",
					"id": "6e4c239c-76fe-429f-973d-ee377f2e2833",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}pagebuilder/pages_list"
					},
					"response": []
				},
				{
					"name": "Update Pages",
					"id": "6faef083-19de-4e3e-a372-e22265636978",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n[\r\n    \r\n    {\r\n            \"id\": 8,\r\n            \"name\": \"Page 5\",\r\n            \"title\": \"page\",\r\n            \"content\": \"{}\",\r\n            \"module_id\": 6\r\n            \r\n        }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}pagebuilder/pages_submit"
					},
					"response": []
				},
				{
					"name": "Delete pages",
					"id": "5001bb19-c654-41ae-8330-88b186254cff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"page_ids\":[1002]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}pagebuilder/pages_submit"
					},
					"response": []
				},
				{
					"name": "List all modules",
					"id": "886d200d-cbc4-4531-b78d-6708ff93f607",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}pagebuilder/modules_list"
					},
					"response": []
				},
				{
					"name": "viewpages",
					"id": "9d7665cc-4b26-4716-93aa-906314e60540",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}pagebuilder/pages_list/1"
					},
					"response": []
				}
			],
			"id": "73388ff2-0a32-4749-a078-522ca7888deb"
		},
		{
			"name": "DashboardReport",
			"item": [
				{
					"name": "Profile of staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "4b01f5b6-1a0c-4a63-8168-f45549d234c4"
							}
						}
					],
					"id": "3fba2aaa-6463-4168-9eab-e47923abdd3d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/staff_profile"
					},
					"response": []
				},
				{
					"name": "GeographicalAge and Analysis",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "246d3f8b-debb-4a4e-a226-3adf32e1ac5a"
							}
						}
					],
					"id": "c894a93b-a1ec-4420-a590-6d1772a9354f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/geographical_age_gender_analysis"
					},
					"response": []
				},
				{
					"name": "GHG Emissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "f9b7623f-3d49-40ed-bc5d-db9177dc0e49"
							}
						}
					],
					"id": "7e1e144c-2e7a-4c3d-8e65-e5853253b48c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/ghg_emissions_scope_details"
					},
					"response": []
				},
				{
					"name": "GhgIntensityByManHours",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "daeb0b90-beb9-412a-8c30-4364e6f8dbb0"
							}
						}
					],
					"id": "7a0c737b-3aa8-467a-97af-ed4ed31ffc92",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/ghg_intensity_by_man_hours"
					},
					"response": []
				},
				{
					"name": "GHGEmissionIntensityByLocationOverTime",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "045eed1d-da6b-4272-a373-5ea5b128fab6"
							}
						}
					],
					"id": "ed8006a1-f64d-4f8b-92f7-73d36de1f2c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/hierarchical_consumer_wise_ghg_emission"
					},
					"response": []
				},
				{
					"name": "HierarchicalConsumerwiseGHGEmission",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "6c39a145-e16c-40b7-b7c7-a7a505bfeb15"
							}
						}
					],
					"id": "2902780c-35a5-4a87-b763-827ed5855daf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/hierarchical_consumer_wise_ghg_emission"
					},
					"response": []
				},
				{
					"name": "days_lost_to_injury",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "393d4e6a-294c-4c07-8168-53821a631bee"
							}
						}
					],
					"id": "cbda20c4-d763-4583-aa1b-15a77b7575b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/days_lost_to_injury"
					},
					"response": []
				},
				{
					"name": "Busiest travel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "a6316840-922c-4d63-99f2-56aee76da197"
							}
						}
					],
					"id": "deeb475a-d95b-49a5-bf4a-d964773dfc04",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/busiest_travel"
					},
					"response": []
				},
				{
					"name": "Consumption By Cost",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_year = new Date().getFullYear();\r",
									"const previous_year = current_year - 1;\r",
									"start_date = previous_year + \"-\" + 01 + \"-\" + 01;\r",
									"pm.environment.set(\"start_date\", start_date);\r",
									"end_date = previous_year + \"-\" + 12 + \"-\" + 31;\r",
									"pm.environment.set(\"end_date\", end_date);"
								],
								"type": "text/javascript",
								"id": "400b69df-2bfa-4d51-bdf6-d841cd409b4e"
							}
						}
					],
					"id": "e53fc830-148c-4f9b-b622-295eb8c294e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start_date\":\"{{start_date}}\",\r\n    \"end_date\":\"{{end_date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://staging.sustainion.tech/api/report/dashboard/consumption_by_cost"
					},
					"response": []
				}
			],
			"id": "dec475d9-81cb-4dd9-9a29-93ad604dbccd"
		},
		{
			"name": "GAP report",
			"item": [
				{
					"name": "consumers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Check if the response is successful and contains data\r",
									"if (responseJson.success === true && Array.isArray(responseJson.data) && responseJson.data.length > 0) {\r",
									"    // Extract all \"id\" values from the data array\r",
									"    const allIds = responseJson.data.map(item => item.id);\r",
									"    \r",
									"    // Generate a random index to select a random \"id\"\r",
									"    const randomIndex = Math.floor(Math.random() * allIds.length);\r",
									"    \r",
									"    // Get the random \"id\" value\r",
									"    const randomLocId = allIds[randomIndex];\r",
									"    \r",
									"    // Set the random \"id\" as a global variable\r",
									"    pm.globals.set(\"randomLocId\", randomLocId);\r",
									"\r",
									"    // Log the value of the randomLocId variable to the console\r",
									"console.log(\"Random Location ID:\", randomLocId);\r",
									"} else {\r",
									"    // Handle the case where the response is not successful or empty\r",
									"    console.log(\"The response does not contain valid data.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"id": "d19e4fc7-1b90-497f-8ef4-3b0929796836"
							}
						}
					],
					"id": "f48eb825-6cc0-46d4-94e0-c03ab37c199b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/list/locations?export=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"list",
								"locations"
							],
							"query": [
								{
									"key": "export",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON to extract the tables array\r",
									"const responseJson = pm.response.json();\r",
									"const tablesArray = responseJson.data.tables;\r",
									"\r",
									"// Generate a random index to select a random table entry\r",
									"const randomIndex = Math.floor(Math.random() * tablesArray.length);\r",
									"\r",
									"// Get the id value at the random index\r",
									"const randomIdValue = tablesArray[randomIndex].id;\r",
									"\r",
									"// Log the random id to the console\r",
									"console.log(\"Random ID Value:\", randomIdValue);\r",
									"\r",
									"// Set the random id as a global environment variable\r",
									"pm.globals.set(\"randomIdVariable\", randomIdValue);\r",
									""
								],
								"type": "text/javascript",
								"id": "4ab68ebc-ecda-4941-9d32-31b3ef060eeb"
							}
						}
					],
					"id": "e1bb81e1-836d-4cb6-b66b-3e99ecaefcb4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/reports/gap_report_filter"
					},
					"response": []
				},
				{
					"name": "Day report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "aa246d03-4737-4ae6-8fd2-4be9cd7f7687"
							}
						}
					],
					"id": "eeaa7c31-e13f-4c0e-86d7-acc96ed3eb82",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/reports/gap_report_dates?start_date=2023-01-01&end_date=2023-09-30&table={{randomIdVariable}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"reports",
								"gap_report_dates"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2023-01-01"
								},
								{
									"key": "end_date",
									"value": "2023-09-30"
								},
								{
									"key": "table",
									"value": "{{randomIdVariable}}"
								},
								{
									"key": "assignee_id",
									"value": "2",
									"disabled": true
								},
								{
									"key": "consumer_id",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Monthly Gap Report",
					"id": "934e15a1-8500-4735-84bc-25cd629cc91f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/reports/gap_report_months?start_date=2023-01-01&end_date=2023-12-23&consumer_id={{randomLocId}}&table={{randomIdVariable}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"reports",
								"gap_report_months"
							],
							"query": [
								{
									"key": "start_date",
									"value": "2023-01-01"
								},
								{
									"key": "end_date",
									"value": "2023-12-23"
								},
								{
									"key": "consumer_id",
									"value": "{{randomLocId}}"
								},
								{
									"key": "table",
									"value": "{{randomIdVariable}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Data quality",
					"id": "f1fbbdf0-2c8f-4940-8662-95453cf56bdf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/reports/data_quality_report?start_month=2023-01&end_month=2023-12&location_id=3",
							"host": [
								"{{url}}"
							],
							"path": [
								"reports",
								"data_quality_report"
							],
							"query": [
								{
									"key": "start_month",
									"value": "2023-01"
								},
								{
									"key": "end_month",
									"value": "2023-12"
								},
								{
									"key": "location_id",
									"value": "3"
								},
								{
									"key": "table",
									"value": "{{randomIdVariable}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "3b35cfae-be31-45e7-9123-b20259cfcaba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"json_data\": {\r\n        \"success\": true,\r\n        \"data\": {\r\n            \"Head Quarters\": {\r\n                \"Gas Consumption\": [\r\n                    \"2015-02-01\",\r\n                    \"2015-03-01\"\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/reports/send_email_gap_report_months?assignee_id=44&consumer_id={{randomLocId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"reports",
								"send_email_gap_report_months"
							],
							"query": [
								{
									"key": "assignee_id",
									"value": "44"
								},
								{
									"key": "consumer_id",
									"value": "{{randomLocId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "7fbbe833-6b7f-4ae6-90c3-dbfbc17747d9"
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Table list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON to extract the data array\r",
									"const responseJson = pm.response.json();\r",
									"const dataArray = responseJson.data;\r",
									"\r",
									"// Generate a random index to select a random data entry\r",
									"const randomIndex = Math.floor(Math.random() * dataArray.length);\r",
									"\r",
									"// Get the label value at the random index\r",
									"const randomLabelValue = dataArray[randomIndex].label;\r",
									"\r",
									"// Get the id value at the random index\r",
									"const randomIdValue = dataArray[randomIndex].id;\r",
									"\r",
									"// Get the table_name value at the random index\r",
									"const randomTableNameValue = dataArray[randomIndex].table_name;\r",
									"\r",
									"// Log the random label value, id, and table_name to the console\r",
									"console.log(\"Random Label Value:\", randomLabelValue);\r",
									"console.log(\"Random ID Value:\", randomIdValue);\r",
									"console.log(\"Random Table Name Value:\", randomTableNameValue);\r",
									"\r",
									"// Set the random label value as a global environment variable\r",
									"pm.globals.set(\"randomLabelVariable\", randomLabelValue);\r",
									"\r",
									"// Set the random id value as a global environment variable\r",
									"pm.globals.set(\"randomIdVariable\", randomIdValue);\r",
									"\r",
									"// Set the random table_name value as a global environment variable\r",
									"pm.globals.set(\"randomTableNameVariable\", randomTableNameValue);\r",
									""
								],
								"type": "text/javascript",
								"id": "4d8f8162-b978-4945-aa3b-586f20a6f0d0"
							}
						}
					],
					"id": "5d0e4cf0-8b97-4741-8584-e7d52fe5ac13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-report}}reportbuilder/tablelist?export=1&order_by=asc",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"tablelist"
							],
							"query": [
								{
									"key": "export",
									"value": "1"
								},
								{
									"key": "order_by",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of the randomLabelVariable from globals\r",
									"const randomLabelValue = pm.globals.get(\"randomLabelVariable\");\r",
									"\r",
									"// Generate a random name based on the randomLabelValue\r",
									"function generateRandomName(label) {\r",
									"    const randomNumber = Math.floor(Math.random() * 1000);\r",
									"    return `${label}_Test_${randomNumber}`;\r",
									"}\r",
									"\r",
									"// Call the function to generate a random name using the randomLabelValue\r",
									"const randomTestName = generateRandomName(randomLabelValue);\r",
									"\r",
									"// Log the random name to the console\r",
									"console.log(\"Random Test Name:\", randomTestName);\r",
									"\r",
									"// Set the random name as a global environment variable\r",
									"pm.globals.set(\"randomTestNameVariable\", randomTestName);\r",
									""
								],
								"type": "text/javascript",
								"id": "efd4f7a5-d653-45ec-9cdb-fb90d09e6002"
							}
						}
					],
					"id": "29179ff3-0fc9-49b7-acfa-181f3f13881c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"{{randomTestNameVariable}}\",\r\n        \"title\": \"Report\",\r\n        \"source_data\": {{randomIdVariable}},\r\n        \"start_date\": \"2023-01-01\",\r\n        \"end_date\": \"2023-08-30\",\r\n        \"output_type\": \"reports\",\r\n        \"content_json\": \"{\\\"key\\\": \\\"value\\\"}\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url-report}}/reportbuilder/reports"
					},
					"response": []
				},
				{
					"name": "ListReport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON to extract the data array\r",
									"const responseJson = pm.response.json();\r",
									"const dataArray = responseJson.data;\r",
									"\r",
									"// Sort the data array by report id in descending order\r",
									"dataArray.sort((a, b) => b.id - a.id);\r",
									"\r",
									"// Get the latest report id value\r",
									"const latestReportId = dataArray[0].id;\r",
									"\r",
									"// Log the latest report id to the console\r",
									"console.log(\"Latest Report ID:\", latestReportId);\r",
									"\r",
									"// Set the latest report id as a global environment variable\r",
									"pm.globals.set(\"latestReportIdVariable\", latestReportId);\r",
									""
								],
								"type": "text/javascript",
								"id": "30d4b305-5234-43d6-a6e7-5e8809f7a974"
							}
						}
					],
					"id": "113f3808-c908-4b13-831b-5100917f6d29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-report}}reportbuilder/reports?order_by=desc",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"reports"
							],
							"query": [
								{
									"key": "order_by",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the random label value from the global environment variable\r",
									"const randomLabelValue = pm.globals.get(\"randomLabelVariable\");\r",
									"\r",
									"// Generate a random name using the random label value\r",
									"const randomName = `${randomLabelValue}_Name`;\r",
									"\r",
									"// Log the random name to the console\r",
									"console.log(\"Random Name:\", randomName);\r",
									"\r",
									"// Set the random name as a global environment variable\r",
									"pm.globals.set(\"randomNameVariable\", randomName);\r",
									""
								],
								"type": "text/javascript",
								"id": "a3df8b03-21db-442e-b71d-d74cc00d97de"
							}
						}
					],
					"id": "86263318-bf61-4010-9363-31e5170b0f7f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\":{{latestReportIdVariable}},\r\n    \"name\": \"{{randomNameVariable}}\",\r\n    \"source_data\": \"{{randomIdVariable}}\",\r\n    \"start_date\": \"2023-06-24\",\r\n    \"end_date\": \"2023-06-30\",\r\n    \"output_type\": \"PDF\",\r\n    \"content_json\": \"{\\\"key\\\": \\\"value\\\"}\"\r\n  }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url-report}}reportbuilder/reports"
					},
					"response": []
				},
				{
					"name": "Report list",
					"id": "8dc17df1-09e9-42c1-a50e-030170c8c17f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url-report}}reportbuilder/report_list?tablename={{randomTableNameVariable}}&limit=500000",
							"host": [
								"{{url-report}}reportbuilder"
							],
							"path": [
								"report_list"
							],
							"query": [
								{
									"key": "tablename",
									"value": "{{randomTableNameVariable}}"
								},
								{
									"key": "limit",
									"value": "500000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"id": "7bdf1aa0-a51f-4468-9233-8e95529db698",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n       {{latestReportIdVariable}}\r\n    ]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url-report}}reportbuilder/reports"
					},
					"response": []
				}
			],
			"id": "7ea5fd15-416d-4538-ba23-7bf9c0a74747"
		},
		{
			"name": "Page Builder",
			"item": [
				{
					"name": "List all modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"// Randomly select an index within the data array\r",
									"const randomIndex = Math.floor(Math.random() * responseData.data.length);\r",
									"\r",
									"// Extract id and name from the randomly selected data\r",
									"const randomId = responseData.data[randomIndex].id;\r",
									"const randomName = responseData.data[randomIndex].name;\r",
									"\r",
									"// Set the environment variables\r",
									"pm.environment.set(\"randomGlobalId\", randomId);\r",
									"pm.environment.set(\"randomGlobalName\", randomName);\r",
									"\r",
									"// Log the values to the console\r",
									"console.log(\"Randomly Selected ID:\", randomId);\r",
									"console.log(\"Randomly Selected Name:\", randomName);\r",
									""
								],
								"type": "text/javascript",
								"id": "0ffacfa4-4afa-4c25-8c68-fdd8851d1598"
							}
						}
					],
					"id": "79d58875-59de-48da-8bb8-bfc2f19e32ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{url}}/pagebuilder/modules_list"
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the value of the environment variable \"randomGlobalName\"\r",
									"const randomGlobalName = pm.environment.get(\"randomGlobalName\");\r",
									"\r",
									"// Function to generate a random string of characters\r",
									"function generateRandomString(length) {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate a new random name using the extracted name as a prefix\r",
									"const generatedName = randomGlobalName + \"_\" + generateRandomString(5);\r",
									"\r",
									"// Set the environment variable with the generated name\r",
									"pm.globals.set(\"generatedName\", generatedName);\r",
									"\r",
									"// Log the generated name to the console\r",
									"console.log(\"Generated Name:\", generatedName);\r",
									"\r",
									"// List of meaningful words for generating titles\r",
									"const words = [\r",
									"    \"Adventure\",\r",
									"    \"Journey\",\r",
									"    \"Discovery\",\r",
									"    \"Exploration\",\r",
									"    \"Innovation\",\r",
									"    \"Creativity\",\r",
									"    \"Inspiration\",\r",
									"    \"Dreams\",\r",
									"    \"Solutions\",\r",
									"    \"Success\",\r",
									"    \"Achievement\",\r",
									"    \"Reflection\",\r",
									"    \"Harmony\",\r",
									"    \"Elegance\",\r",
									"    \"Wonder\",\r",
									"    \"Magic\",\r",
									"    \"Brilliance\"\r",
									"];\r",
									"\r",
									"// Function to generate a random index\r",
									"function getRandomIndex(max) {\r",
									"    return Math.floor(Math.random() * max);\r",
									"}\r",
									"\r",
									"// Generate a random meaningful title\r",
									"const randomTitle = `${words[getRandomIndex(words.length)]} of ${words[getRandomIndex(words.length)]}`;\r",
									"\r",
									"// Set the environment variable with the generated title\r",
									"pm.globals.set(\"genTitle\", randomTitle);\r",
									"\r",
									"// Log the generated title to the console\r",
									"console.log(\"Generated Meaningful Title:\", randomTitle);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "98656b7b-22e1-4af5-abe1-72fcc5149dee"
							}
						}
					],
					"id": "893fefa2-1c9a-4652-b605-4ff4631d7206",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"name\": \"{{generatedName}}\",\r\n        \"title\": \"{{genTitle}}\",\r\n        \"module_id\": {{randomGlobalId}},\r\n        \"content\": null\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/pagebuilder/pages_submit"
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response JSON\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"// Extract the \"id\" field from the response data\r",
									"const id = responseData.data[0].id;\r",
									"\r",
									"// Set the global variable with the extracted \"id\"\r",
									"pm.globals.set(\"pagebuildId\", id);\r",
									"\r",
									"// Log the extracted \"id\" to the console\r",
									"console.log(\"pagebuild  ID:\", id);\r",
									""
								],
								"type": "text/javascript",
								"id": "59b86691-1ba1-4fd6-9d12-31e2501b60b6"
							}
						}
					],
					"id": "c0035b64-149e-4237-8dd1-3da06fc4dbf6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pagebuilder/pages_list?order_by=desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_list"
							],
							"query": [
								{
									"key": "order_by",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"id": "898b818c-d2aa-4448-907e-6a6d2293c42b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": {{pagebuildId}},\r\n        \"name\": \"{{{{generatedName}}}}\",\r\n        \"title\": \"{{genTitle}}\",\r\n        \"content\": \"{}\",\r\n        \"module_id\": {{randomGlobalId}}\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/pagebuilder/pages_submit"
					},
					"response": []
				},
				{
					"name": "View single report",
					"id": "cdf3015c-b0c6-4dc8-86e4-26cc50b31e8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/pagebuilder/pages_list?id={{pagebuildId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"pagebuilder",
								"pages_list"
							],
							"query": [
								{
									"key": "id",
									"value": "{{pagebuildId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"id": "c8ccdb90-1bf3-4e05-9077-783982416010",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"page_ids\":[{{pagebuildId}}]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url}}/pagebuilder/pages_submit"
					},
					"response": []
				}
			],
			"id": "84928da8-80bf-4c0d-9b66-23fce48ec927",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{refresh_token}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e4bd39f5-7036-405d-a9f2-f2ac24619301",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "43970def-6b0c-4a45-a5ea-69c082ad93d9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "FMT",
			"item": [
				{
					"name": "Parameter Builder",
					"item": [
						{
							"name": "Table name list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"// postman.setEnvironmentVariable(\"parameter_table_id\", data.data[0]['id']); \r",
											"pm.globals.set(\"parameter_table_id\", data.data[0]['id']);\r",
											"pm.globals.set(\"parameter_table_name\", data.data[0]['name']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "4ffafbf1-d427-4028-a544-bc0c499f6ccb"
									}
								}
							],
							"id": "11c231ab-e65d-4f1d-b860-0c597c6d6daf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/parameter_table/index?export=1",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"parameter_table",
										"index"
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Table Field List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"postman.setEnvironmentVariable(\"parameter_filter_field\", data.data[7]['COLUMN_NAME']); \r",
											"pm.globals.set(\"parameter_filter_field\", data.data[5]['COLUMN_NAME']);\r",
											"pm.globals.set(\"parameter_field\", data.data[25]['COLUMN_NAME']);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "781deb09-2094-4399-bdbd-1747fc9ca1a3"
									}
								}
							],
							"id": "747a1c00-2213-4389-9d42-40752df9e1d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/parameter_table_field/{{parameter_table_id}}"
							},
							"response": []
						},
						{
							"name": "Filter field list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"// Check if the data array is empty\r",
											"if (responseJson.data.length === 0) {\r",
											"    // Set value 1 to the parameter_filter_field global variable\r",
											"    pm.globals.set(\"parameter_filter_value\", 1);\r",
											"} else {\r",
											"    // Set the id of the first item to the parameter_filter_field global variable\r",
											"    pm.globals.set(\"parameter_filter_value\", responseJson.data[0].id);\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "9cc34c32-0da8-4146-af4f-3d58849cbc5d"
									}
								}
							],
							"id": "542e43ba-535c-4c46-b6aa-d022bb1d575a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/referenced_table_field_list/{{parameter_table_id}}/{{parameter_filter_field}}"
							},
							"response": []
						},
						{
							"name": "Create parameter - Table Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"table parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);\r",
											"\r",
											"pm.variables.set(\"field_function\", \"sum\");"
										],
										"type": "text/javascript",
										"id": "84db4b5b-68f0-497e-bfb1-099fce0239ed"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "5a297926-a715-40ff-8e70-2af5543d5eb4"
									}
								}
							],
							"id": "bbc4447c-fd25-468f-b810-737667832752",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"table\",\r\n    \"table_name\": \"{{parameter_table_name}}\",\r\n    \"field_name\": \"{{parameter_field}}\",\r\n    \"field_function\": \"{{field_function}}\",\r\n    \"field_groupby\": \"\",\r\n    \"filter_field\": \"{{parameter_filter_field}}\",\r\n    \"filter_condition\": \"=\",\r\n    \"filter_value\": \"{{parameter_filter_value}}\",\r\n    \"formula\": null,\r\n    \"table_id\": \"{{parameter_table_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/addreportparameter/"
							},
							"response": []
						},
						{
							"name": "Parameter List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the JSON response\r",
											"const responseJson = pm.response.json();\r",
											"\r",
											"pm.globals.set(\"parameter_id\", responseJson.data[0].id);\r",
											"pm.globals.set(\"parameter_name\", responseJson.data[0].name);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "02bcbb30-e3c2-43cd-b476-c4ada66808d0"
									}
								}
							],
							"id": "15b2d20c-3aac-4438-8ce7-c82107948cb6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/reportparameter/?export=1&sortby=desc",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"reportparameter",
										""
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										},
										{
											"key": "sortby",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Parameter Update-Table Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);\r",
											"\r",
											"pm.variables.set(\"field_function\", \"sum\");"
										],
										"type": "text/javascript",
										"id": "4c0337c1-6f1c-4038-8836-ed71b08e863d"
									}
								}
							],
							"id": "6d77e06b-cff7-43df-9b95-9a1d5e169f68",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"table\",\r\n    \"table_name\": \"{{parameter_table_name}}\",\r\n    \"field_name\": \"{{parameter_field}}\",\r\n    \"field_function\": \"{{field_function}}\",\r\n    \"field_groupby\": \"\",\r\n    \"filter_field\": \"{{parameter_filter_field}}\",\r\n    \"filter_condition\": \"=\",\r\n    \"filter_value\": \"{{parameter_filter_value}}\",\r\n    \"formula\": null,\r\n    \"table_id\": \"{{parameter_table_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/edit-parameter/{{parameter_id}}"
							},
							"response": []
						},
						{
							"name": "View Parameter",
							"id": "eab323da-9e41-4bdc-b078-17444a590851",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/view-parameter/{{parameter_id}}"
							},
							"response": []
						},
						{
							"name": "Create parameter -  Derived Type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"derived parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);"
										],
										"type": "text/javascript",
										"id": "aeb1ed0f-a29b-4e9d-9f15-022adb06a762"
									}
								}
							],
							"id": "7fcd31e8-a3a8-4466-97d3-cb16c3b570ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"derived\",\r\n    \"table_name\": null,\r\n    \"field_name\": null,\r\n    \"field_function\": null,\r\n    \"field_groupby\": null,\r\n    \"filter_field\": null,\r\n    \"filter_condition\": null,\r\n    \"filter_value\": null,\r\n    \"formula\": \"[{\\\"title\\\":\\\"(\\\",\\\"type\\\":\\\"openparenthesis\\\"},{\\\"id\\\":{{parameter_id}},\\\"title\\\":\\\"{{parameter_name}}\\\",\\\"type\\\":\\\"operand\\\"},{\\\"title\\\":\\\"*\\\",\\\"type\\\":\\\"operator\\\"},{\\\"title\\\":\\\"100\\\",\\\"type\\\":\\\"operand\\\"},{\\\"title\\\":\\\")\\\",\\\"type\\\":\\\"closeparenthesis\\\"}]\",\r\n    \"table_id\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/addreportparameter/"
							},
							"response": []
						},
						{
							"name": "Create parameter -  input Type Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Parameter Name\r",
											"const randomName = \"input parameter_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"parameter_name\", randomName);"
										],
										"type": "text/javascript",
										"id": "81f7e157-66ec-43d3-a146-16b2cce8a88b"
									}
								}
							],
							"id": "629fbd1d-3021-4fdf-ba0b-5d22fa73a4fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{parameter_name}}\",\r\n    \"type\": \"input\",\r\n    \"table_name\": null,\r\n    \"field_name\": null,\r\n    \"field_function\": null,\r\n    \"field_groupby\": null,\r\n    \"filter_field\": null,\r\n    \"filter_condition\": null,\r\n    \"filter_value\": null,\r\n    \"formula\": null,\r\n    \"table_id\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/addreportparameter/"
							},
							"response": []
						}
					],
					"id": "6e1ea71d-dd26-46b6-ab6f-a6865fe2ee95"
				},
				{
					"name": "Frame work Builder",
					"item": [
						{
							"name": "Unit List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"unit_id\", data.data[0]['id']);\r",
											"pm.globals.set(\"unit_name\", data.data[0]['name']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "8208d0e1-1bea-4d49-b21c-7374f25ea21b"
									}
								}
							],
							"id": "834247ff-03f9-40c6-8ebc-725692e5dc43",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/admin/list/units"
							},
							"response": []
						},
						{
							"name": "location list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"location_id\", data.data[0]['id']);\r",
											"pm.globals.set(\"location_name\", data.data[0]['name']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "16012c08-898f-4b8a-968f-494dfe9352d5"
									}
								}
							],
							"id": "e770adcf-e7fe-4de0-a5d9-9a2ef92c4d1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/location-list/"
							},
							"response": []
						},
						{
							"name": "Create report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// report Name\r",
											"const randomName = \"Report_\" + Math.floor(Math.random() * 1000);\r",
											"pm.variables.set(\"report_name\", randomName);\r",
											"\r",
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);\r",
											""
										],
										"type": "text/javascript",
										"id": "b174798e-cd02-4151-8ac7-1ea0569d0855"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"report_id\", data.data['id']);\r",
											"pm.globals.set(\"report_name\", data.data['reportname']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "2de3df04-46dd-4334-aa9a-e940364cc240"
									}
								}
							],
							"id": "aaf58224-7e43-4762-b180-0628c3b7e51b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": \"{{location_id}}\",\r\n    \"reportsection\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/addreport/"
							},
							"response": []
						},
						{
							"name": "Update report Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.variables.set(\"report_format\", \"numberwithpercentage\");\r",
											"\r",
											"pm.variables.set(\"section_topic_name\", \"environment\");\r",
											"\r",
											"pm.variables.set(\"sectionname\", \"environment\");\r",
											"\r",
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);"
										],
										"type": "text/javascript",
										"id": "4de5135a-b916-4440-849a-b24f4b0ea9ec"
									}
								}
							],
							"id": "69861722-8d32-4534-8686-6a6f65fbbdbc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": {{location_id}},\r\n    \"reportsection\": [\r\n        {\r\n            \"document\":\"{{file_path}}\",\r\n            \"document_name\":\"{{file_name}}\",\r\n            \"format\": \"{{report_format}}\",\r\n            \"parameter_id\": \"{{parameter_id}}\",\r\n            \"parameter_name\": \"{{parameter_name}}\",\r\n            \"remark\": \"\",\r\n            \"section_topic_name\": \"{{section_topic_name}}\",\r\n            \"sectionname\": \"{{sectionname}}\",\r\n            \"sort_order\": 1,\r\n            \"unit_id\": \"{{unit_id}}\"\r\n        }\r\n    ],\r\n    \"report_location_name\": \"{{location_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/update-report/{{report_id}}"
							},
							"response": []
						},
						{
							"name": "view report",
							"id": "7f725b3d-08b9-4a45-b055-09691274f478",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/view-report/{{report_id}}"
							},
							"response": []
						},
						{
							"name": "Report list",
							"id": "ee3bf54f-cfa3-4958-927a-c9621166551a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/report-data-list/?export=1&sortby=desc",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"report-data-list",
										""
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										},
										{
											"key": "sortby",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Report View",
							"id": "452dc8e3-c2be-47ba-bd2e-b216bbf80595",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://staging.sustainion.tech/api/dashboard/reportparameter/?export=1&sortby=asc&is_formula=1",
									"protocol": "https",
									"host": [
										"staging",
										"sustainion",
										"tech"
									],
									"path": [
										"api",
										"dashboard",
										"reportparameter",
										""
									],
									"query": [
										{
											"key": "export",
											"value": "1"
										},
										{
											"key": "sortby",
											"value": "asc"
										},
										{
											"key": "is_formula",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remark update - client Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);\r",
											"\r",
											"\r",
											"pm.variables.set(\"report_format\", \"numberwithpercentage\");\r",
											"\r",
											"pm.variables.set(\"section_topic_name\", \"environment\");\r",
											"\r",
											"pm.variables.set(\"sectionname\", \"environment\");"
										],
										"type": "text/javascript",
										"id": "227da249-b914-49f3-ad9d-70d08948cd90"
									}
								}
							],
							"id": "4049d5f8-e462-4787-9eec-1e0b5668c4c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": \"{{location_id}}\",\r\n    \"reportsection\": [\r\n        {\r\n            \"sectionname\": \"{{sectionname}}\",\r\n            \"section_data\": [\r\n                {\r\n                    \"section_topic_name\": \"{{section_topic_name}}\",\r\n                    \"section_topic_data\": [\r\n                        {\r\n                            \"parameter_id\": \"{{parameter_id}}\",\r\n                            \"parameter_name\": \"{{parameter_name}}\",\r\n                            \"unit_id\": \"{{unit_id}}\",\r\n                            \"unit_name\": \"{{unit_name}}\",\r\n                            \"type\": \"table\",\r\n                            \"format\": \"{{report_format}}\",\r\n                            \"remark\": \"test\",\r\n                            \"year1\": null,\r\n                            \"year2\": null,\r\n                            \"sort_order\": 1,\r\n                            \"document\": \"\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/update-view-report/{{report_id}}"
							},
							"response": []
						},
						{
							"name": "Upload document-Client Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.variables.set(\"report_format\", \"numberwithpercentage\");\r",
											"\r",
											"pm.variables.set(\"section_topic_name\", \"environment\");\r",
											"\r",
											"pm.variables.set(\"sectionname\", \"environment\");\r",
											"\r",
											"const current_year = new Date().getFullYear();\r",
											"const previous_year = current_year - 1;\r",
											"\r",
											"pm.variables.set(\"current_year\", current_year);\r",
											"pm.variables.set(\"previous_year\", previous_year);"
										],
										"type": "text/javascript",
										"id": "582f04ff-5b4f-4888-9586-b2ff1f2454c1"
									}
								}
							],
							"id": "d7436f7f-5390-4b15-98d0-43fc8806638d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"reportname\": \"{{report_name}}\",\r\n    \"reportyear1\": \"{{current_year}}\",\r\n    \"reportyear2\": \"{{previous_year}}\",\r\n    \"report_location_id\": {{location_id}},\r\n    \"reportsection\": [\r\n        {\r\n            \"document\": \"\",\r\n            \"format\": \"{{report_format}}\",\r\n            \"parameter_id\": \"{{parameter_id}}\",\r\n            \"parameter_name\": \"{{parameter_name}}\",\r\n            \"remark\": \"\",\r\n            \"section_topic_name\": \"{{section_topic_name}}\",\r\n            \"sectionname\": \"{{sectionname}}\",\r\n            \"sort_order\": 1,\r\n            \"unit_id\": \"{{unit_id}}\"\r\n        }\r\n    ],\r\n    \"report_location_name\": \"{{location_name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://staging.sustainion.tech/api/dashboard/update-report/{{report_id}}"
							},
							"response": []
						},
						{
							"name": "Get Report-client Admin",
							"id": "efe6361c-dffd-426f-bbda-432d5cee5d42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/get-report/{{report_id}}"
							},
							"response": []
						}
					],
					"id": "900525f8-31ad-4390-a224-c82ea6f2500b"
				},
				{
					"name": "Parameter Delete",
					"item": [
						{
							"name": "Delete Parameter",
							"id": "8618a123-b133-4f86-b74a-1938a4022f22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/delete-parameter/{{parameter_id}}"
							},
							"response": []
						}
					],
					"id": "d4c0ba03-5722-48cc-ac40-5b1fc7fc9854"
				},
				{
					"name": "Frame work Builder Delete",
					"item": [
						{
							"name": "delete framework builder",
							"id": "65426381-ef91-487a-8716-19a7f19461e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "https://staging.sustainion.tech/api/dashboard/delete-report/{{report_id}}"
							},
							"response": []
						}
					],
					"id": "75633a2b-0980-4ee2-8eb1-672054da9ca4"
				},
				{
					"name": "File Upload",
					"item": [
						{
							"name": "File Upload",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"id": "52a1840e-a7e5-431e-9cf0-0e48c221ad6a"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											" \r",
											"pm.globals.set(\"file_label\", data.data['files'][0]['label']);\r",
											"pm.globals.set(\"file_name\", data.data['files'][0]['filename']);\r",
											"pm.globals.set(\"file_path\", data.data['files'][0]['path']);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"\r",
											"pm.response.to.have.status(200);\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"id": "dc96e90a-8f44-4583-8cb8-b20103d49226"
									}
								}
							],
							"id": "360402bd-2f47-4526-af59-de2e0916d7e5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream",
										"type": "default"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"type": "file",
											"src": "/C:/Users/Admin/Downloads/pdfresizer.com-pdf-rotate.pdf"
										},
										{
											"key": "labels",
											"value": "FMT",
											"type": "default"
										}
									]
								},
								"url": "https://staging.sustainion.tech/api/admin/upload-files"
							},
							"response": []
						}
					],
					"id": "402d53c2-6818-40dc-bfda-3deddb44b901"
				}
			],
			"id": "d0657b61-99e1-4ce7-8664-addd942c4fef"
		}
	]
}